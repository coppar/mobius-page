<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <title>Mobius Application</title>

    <!-- <link rel="stylesheet" href="//code.jquery.com/ui/1.12.1/themes/base/jquery-ui.css">
    <link rel="stylesheet" href="/resources/demos/style.css"> -->

    <!-- <script src="stylesheet\tinymce\tinymce.min.js"></script> -->
    <script src="https://cdn.tiny.cloud/1/v73hdb8haytf20znc24j0223o64viyhlcpitocjqagu2p3o0/tinymce/5/tinymce.min.js"
        referrerpolicy="origin"></script>
    <script src="https://code.jquery.com/jquery-3.5.0.min.js"></script>

    <script src="https://code.jquery.com/jquery-1.12.4.js"></script>
    <script src="https://code.jquery.com/ui/1.12.1/jquery-ui.js"></script>
    <style>
        .sidenav {
            height: 100%;
            width: 160px;
            position: fixed;
            z-index: 1;
            top: 0;
            right: 0;
            background-color: #33ccff;
            overflow-x: hidden;
            padding-top: 20px;
        }

        .sidenav a {
            padding: 6px 8px 6px 16px;
            text-decoration: none;
            font-size: 25px;
            color: #818181;
            display: block;
        }

        .sidenav a:hover {
            color: #f1f1f1;
        }

        @media screen and (max-height: 450px) {
            .sidenav {
                padding-top: 15px;
            }

            .sidenav a {
                font-size: 18px;
            }
        }

        .leftSideBar {
            height: 100%;
            width: 200px;
            position: fixed;
            z-index: 1;
            top: 0;
            left: 0;
            background-color: #33ccff;
            overflow-x: hidden;
            padding-top: 20px;
        }

        .leftSideBar a {
            padding: 6px 8px 6px 16px;
            text-decoration: none;
            font-size: 25px;
            color: #818181;
            display: block;
        }

        .leftSideBar a:hover {
            color: #f1f1f1;
        }

        @media screen and (max-height: 450px) {
            .leftSideBar {
                padding-top: 15px;
            }

            .leftSideBar a {
                font-size: 18px;
            }
        }

        .containerForDragContents {
            background-color: #333;
            padding: 1rem;
            margin-top: 1rem;
        }

        .draggable {
            padding: 1rem;
            background-color: white;
            border: 1px solid black;
            cursor: move;
        }

        .draggable.dragging {
            opacity: .5;
        }

        .eventContainerForDragContents {
            background-color: red;
            padding: 1rem;
            margin-top: 1rem;
        }

        .draggableEvent {
            padding: 1rem;
            background-color: white;
            border: 1px solid red;
            cursor: move;
        }

        .draggableEvent.draggingIt {
            opacity: .5;
        }

        .flex-container {
            margin-left: 30px;
            display: flex;
            flex-wrap: wrap;
            /* background-color: DodgerBlue; */
        }

        .flex-container>div {
            background-color: #f1f1f1;
            width: 500px;
            height: 570px;
            margin: 20px;
            text-align: center;
            line-height: 75px;
            font-size: 30px;
        }

        #addNewNoteBtn {
            position: absolute;
            left: 47%;
        }

        .loader {
            position: absolute;
            left: 50%;
            top: 50%;
            z-index: 1;
            width: 150px;
            height: 150px;
            margin: -75px 0 0 -75px;
            border: 16px solid #f3f3f3;
            border-radius: 50%;
            border-top: 16px solid #3498db;
            width: 120px;
            height: 120px;
            -webkit-animation: spin 2s linear infinite;
            animation: spin 2s linear infinite;
        }

        .text {
            position: absolute;
            top: 30%;
            left: 50%;
            font-size: 50px;
            color: white;
            transform: translate(-50%, -50%);
            -ms-transform: translate(-50%, -50%);
        }

        /* #overlayForSortingNotes {
            position: fixed;
            display: none;
            width: 100%;
            height: 100%;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background-color: rgba(0, 0, 0, 0.5);
            z-index: 2;
            cursor: pointer;
        } */

        #overlayForFormSubmission {
            position: fixed;
            display: none;
            width: 100%;
            height: 100%;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background-color: rgba(0, 0, 0, 0.5);
            z-index: 2;
            cursor: pointer;
        }

        #submitFormFail {
            position: absolute;
            top: 50%;
            left: 60%;
            color: white;
            border-color: aliceblue;
        }

        #submitFormSuccess {
            position: absolute;
            top: 50%;
            left: 34.8%;
            color: white;
            border-color: aliceblue;
        }

        #overlay {
            position: fixed;
            display: none;
            width: 100%;
            height: 100%;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background-color: rgba(0, 0, 0, 0.5);
            z-index: 2;
            cursor: pointer;
        }

        #overlayForNotes {
            position: fixed;
            display: none;
            width: 100%;
            height: 100%;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background-color: rgba(0, 0, 0, 0.5);
            z-index: 2;
            cursor: pointer;
        }

        @-webkit-keyframes spin {
            0% {
                -webkit-transform: rotate(0deg);
            }

            100% {
                -webkit-transform: rotate(360deg);
            }
        }

        @keyframes spin {
            0% {
                transform: rotate(0deg);
            }

            100% {
                transform: rotate(360deg);
            }
        }

        p:empty:not(:focus)::before {
            content: attr(data-placeholder);
        }

        h4:empty:not(:focus)::before {
            content: attr(data-placeholder);
        }

        .notesTextArea {
            height: 321px;
        }

        .timeline-article .meta-date .date {
            font-size: 21px;
            line-height: 20px;
        }

        /* .timeline-article .meta-date .month {
            font-size: 12px;
            line-height: 10px;
        } */

        .timeline-article .meta-date {
            position: absolute;
            top: 0;
            left: 48.25%;
            width: 95px;
            height: 62px;
            margin-left: -31px;
            color: #fff;
            border-radius: 15px;
            background: #00b0bd;
        }

        /* .timeline-article .meta-date .date,
        .timeline-article .meta-date .month {
            display: block;
            text-align: center;
            font-weight: 900;
            padding-top: 20px;
        } */

        /*===== Vertical Timeline =====*/
        #conference-timeline {
            position: relative;
            max-width: 920px;
            width: 100%;
            margin: 0 auto;
            margin-top: 50px;
            margin-bottom: 50px;
        }

        #conference-timeline .timeline-start,
        #conference-timeline .timeline-end {
            display: table;
            font-family: "Poppins", sans-serif;
            font-size: 18px;
            font-weight: 900;
            text-transform: uppercase;
            background: #00b0bd;
            padding: 15px 23px;
            color: #fff;
            max-width: 5%;
            width: 100%;
            text-align: center;
            margin: 0 auto;
        }

        #conference-timeline .conference-center-line {
            position: absolute;
            width: 3px;
            height: 100%;
            top: 0;
            left: 50%;
            margin-left: -2px;
            background: #00b0bd;
            z-index: -1;
        }

        #conference-timeline .conference-timeline-content {
            padding-top: 67px;
            /* padding-bottom: 67px; */
        }

        .timeline-article {
            width: 100%;
            height: 100%;
            position: relative;
            overflow: hidden;
            margin: 20px 0;
        }

        .timeline-article .content-left-container,
        .timeline-article .content-right-container {
            max-width: 44%;
            width: 100%;
        }

        .timeline-article .timeline-author {
            display: block;
            font-weight: 400;
            font-size: 14px;
            line-height: 24px;
            color: #242424;
            text-align: right;
        }

        .timeline-article .content-left,
        .timeline-article .content-right {
            position: relative;
            width: auto;
            border: 1px solid #ddd;
            background-color: #fff;
            box-shadow: 0 1px 3px rgba(0, 0, 0, .03);
            padding: 27px 25px;
        }

        .timeline-article p {
            margin: 0 0 0 60px;
            padding: 0;
            font-weight: 400;
            color: #242424;
            font-size: 14px;
            line-height: 24px;
            position: relative;
        }

        .timeline-article p span.article-number {
            position: absolute;
            font-weight: 300;
            font-size: 44px;
            top: 10px;
            left: -60px;
            color: #00b0bd;
        }

        .timeline-article .content-left-container {
            float: left;
        }

        .timeline-article .content-right-container {
            float: right;
        }

        .timeline-article .content-left:before,
        .timeline-article .content-right:before {
            position: absolute;
            top: 20px;
            font-size: 23px;
            font-family: "FontAwesome";
            color: #fff;
        }

        .timeline-article .content-left:before {
            /* content: "\f0da"; */
            right: -8px;
        }

        .timeline-article .content-right:before {
            /* content: "\f0d9"; */
            left: -8px;
        }

        .timeline-article .meta-date {
            position: absolute;
            top: 0;
            left: 48.5%;
            width: 90px;
            height: 62px;
            margin-left: -31px;
            color: #fff;
            border-radius: 25px;
            background: #00b0bd;
        }

        .timeline-article .meta-date .date,
        .timeline-article .meta-date .month {
            display: block;
            text-align: center;
            font-weight: 900;
            padding-top: 20px;
        }

        .timeline-article .meta-date .date {
            font-size: 20px;
            /* line-height: 40px; */
        }

        .timeline-article .meta-date .month {
            font-size: 12px;
            line-height: 10px;
        }

        /*===== // Vertical Timeline =====*/

        /*===== Resonsive Vertical Timeline =====*/
        @media only screen and (max-width: 830px) {

            #conference-timeline .timeline-start,
            #conference-timeline .timeline-end {
                margin: 0;
            }

            #conference-timeline .conference-center-line {
                margin-left: 0;
                left: 50px;
            }

            .timeline-article .meta-date {
                margin-left: 0;
                left: 20px;
            }

            .timeline-article .content-left-container,
            .timeline-article .content-right-container {
                max-width: 100%;
                width: auto;
                float: none;
                margin-left: 110px;
                min-height: 53px;
            }

            .timeline-article .content-left-container {
                margin-bottom: 20px;
            }

            .timeline-article .content-left,
            .timeline-article .content-right {
                padding: 10px 25px;
                min-height: 65px;
            }

            .timeline-article .content-left:before {
                content: "\f0d9";
                right: auto;
                left: -8px;
            }

            .timeline-article .content-right:before {
                display: none;
            }
        }

        @media only screen and (max-width: 400px) {
            .timeline-article p {
                margin: 0;
            }

            .timeline-article p span.article-number {
                display: none;
            }

        }

        /*===== // Resonsive Vertical Timeline =====*/

        .labelForLastModifiedBy {
            height: 50px;
        }

        /* #sortable {
            list-style-type: none;
            margin: 0;
            padding: 0;
            width: 60%;
        }

        #sortable li {
            margin: 0 3px 3px 3px;
            padding: 0.4em;
            padding-left: 1.5em;
            font-size: 1.4em;
            height: 18px;
        }

        #sortable li span {
            position: absolute;
            margin-left: -1.3em;
        } */
        .backBtn {
            float: right;
        }

        .commentsLabel {
            text-decoration: underline;
            font-weight: bold;
        }

        .commentsInput {
            width: 90%;
            height: 60%;
            font-size: large;
            line-height: normal;
        }

        .commentsDivLeft {
            width: 40%;
            height: 500px;
            border: blue;
            border-style: solid;
            border-width: 5px;
        }

        .commentsDivRight {
            width: 40%;
            height: 500px;
            border: transparent;
            border-style: solid;
            border-width: 5px;
        }

        .comment-container {
            margin-left: 30px;
            display: flex;
            flex-wrap: wrap;
            /* background-color: DodgerBlue; */
        }

        .comment-container>div {
            /* background-color: #f1f1f1; */
            background-color: white;
            width: 500px;
            height: 470px;
            margin: 20px;
            text-align: center;
            line-height: 75px;
            font-size: 30px;
        }

        .commentsEditedBy {
            height: 50px;
            width: 250px;
        }
    </style>

</head>

<body onclick="checkeverytime()">
    <div class="sidenav" hidden>
        <h1 id="userNameHere" class="ml-4"><%= name %></h1>
        <a href="/home" class="ml-2">Modules</a>
        <a href="/home/<%= theModuleToDisplay._id %>" class="ml-2">
            <%= theModuleToDisplay.moduleCode %>
        </a>
        <!-- <button type="button" onclick="displayNotesRearrangeOverlay()" class="btn btn-primary ml-2 mb-2">Rearrange Notes</button> -->
        <button type="button" onclick="displaySubmitFormOverlay()" class="btn btn-success ml-4">Save</button>
        <a href="/users/logout" class="btn btn-secondary mt-2">Logout</a>
    </div>
    <br />
    <br />

    <div class="backBtn">
        <form action="/home/<%= theModuleToDisplay._id %>" method="GET">
            <button type="submit" class="btn btn-primary" style="float: right;">Back</button>
        </form>
        <br />
        <br />
        <br />
        <br />
        <br />
        <button type="button" onclick="displaySubmitFormOverlay()" class="btn btn-success">Save</button>

    </div>

    <!-- <div class="leftSideBar">
        <h1 class="ml-4">Notes</h1>
        <div class="containerForDragContents" id="idForContainerWithDragContents">
            <p id="pTag1" class="draggable" draggable="true" data-placeholder="Title...">Learning Outcomes</p>
            <p id="pTag2" class="draggable" draggable="true" data-placeholder="Title...">Learning Objectives</p>
            <p id="pTag3" class="draggable" draggable="true" data-placeholder="Title...">People</p>
            <p id="pTag4" class="draggable" draggable="true" data-placeholder="Title...">Characteristics</p>
            <p id="pTag5" class="draggable" draggable="true" data-placeholder="Title...">Strategy</p>
            <p id="pTag6" class="draggable" draggable="true" data-placeholder="Title...">Environment</p>
            <p id="pTag7" class="draggable" draggable="true" data-placeholder="Title...">Location</p>
            <p id="pTag8" class="draggable" draggable="true" data-placeholder="Title...">Constraints</p>
            <p id="pTag9" class="draggable" draggable="true" data-placeholder="Title...">Resources</p>
            <p id="pTag10" class="draggable" draggable="true" data-placeholder="Title...">Activities</p>
            <p id="pTag11" class="draggable" draggable="true" data-placeholder="Title...">Process</p>

        </div>

        <h1 class="ml-4 mt-4">Timeline</h1>
        <div class="eventContainerForDragContents">
            <p class="draggableEvent" draggable="true">1</p>
            <p class="draggableEvent" draggable="true">2</p>
        </div>
    </div> -->
    <form action="/home/<%= theModuleToDisplay._id %>/new-lessonplan" method="POST">
        <div style="border: 1px solid transparent;">
            <h1 class="ml-5">New Lesson Plan & Cards</h1>
            <h4 class="ml-5">
                <%= theModuleToDisplay.moduleCode %>
            </h4>
            <h4 class="ml-5">Topic of Lesson: <input name="topicOfLessonTb" id="topicOfLessonTb"
                    placeholder="Enter topic of lesson" class="form-control" style="width: 900px;"></h4>
        </div>
        <br />

        <!-- ErrorMessage for editlessonplan.ejs Page -->
        <div id="alertErrors">
        </div>
        <div class="backBtn">
            <br />
            <br />
            <button type="button" class="btn btn-primary" id="pasteBtn">Paste</button>
        </div>
        <br />
        <br />
        <br />
        <br />
        <!-- <h1><%= email %></h1> -->
        <h1 style="text-align:center">LXD Notes</h1>
        <div class="flex-container" id="flexContainerId">
            <div class="parent" style="background-color: #0080ff;" id="divForNC1">
                <!-- <h4 id="headerForNotes1" contenteditable="true" data-placeholder="Title..." class="headersNotes">
                    Learning Outcomes</h4> -->
                <input name="headerForNotesName" placeholder="Title..." id="headerForNotes1" class="headersNotes"
                    value="Learning Outcomes">

                <input title="Use this button to change the color of the note" type="color" id="color1"
                    name="colorPickerForNote" value="#0080ff">
                <button title="Use this button to delete this note" type="button" name="goRemoveNotes" id="removeBtn1"
                    class="btn btn-danger">Delete</button>

                <button type="button" class="btn btn-info" name="moveUpBtn"><i class="fa fa-arrow-up"
                        aria-hidden="true"></i></button>
                <button type="button" class="btn btn-info" name="moveDownBtn"><i class="fa fa-arrow-down"
                        aria-hidden="true"></i></button>

                <textarea class="notesTextArea" id="textArea1" name="goTextArea"></textarea>
                <label style="font-size: large;">Last Modified by:</label>
                <!-- <label id="lastModifiedBy1" class="labelForLastModifiedBy"></label> -->
                <input readonly id="lastModifiedBy1" class="labelForLastModifiedBy" name="labelForLastModifiedBy" oninput="trim()">
            </div>
            <div class="parent" style="background-color: #ffff00;" id="divForNC2">
                <!-- <h4 id="headerForNotes2" contenteditable="true" data-placeholder="Title..." class="headersNotes">
                    Learning Objectives</h4> -->
                <input name="headerForNotesName" placeholder="Title..." id="headerForNotes2" class="headersNotes"
                    value="Learning Objectives">
                <input title="Use this button to change the color of the note" type="color" id="color2"
                    name="colorPickerForNote" value="#ffff00">
                <button title="Use this button to delete this note" type="button" name="goRemoveNotes" id="removeBtn2"
                    class="btn btn-danger">Delete</button>

                <button type="button" class="btn btn-info" name="moveUpBtn"><i class="fa fa-arrow-up"
                        aria-hidden="true"></i></button>
                <button type="button" class="btn btn-info" name="moveDownBtn"><i class="fa fa-arrow-down"
                        aria-hidden="true"></i></button>

                <textarea class="notesTextArea" id="textArea2" name="goTextArea"></textarea>
                <label style="font-size: large;">Last Modified by:</label>
                <!-- <label id="lastModifiedBy2" class="labelForLastModifiedBy"></label> -->
                <input readonly id="lastModifiedBy2" class="labelForLastModifiedBy" name="labelForLastModifiedBy" oninput="trim()">
            </div>
            <div class="parent" style="background-color: #80ff00;" id="divForNC3">
                <!-- <h4 id="headerForNotes3" contenteditable="true" data-placeholder="Title..." class="headersNotes">People
                </h4> -->
                <input name="headerForNotesName" placeholder="Title..." id="headerForNotes3" class="headersNotes"
                    value="People">
                <input title="Use this button to change the color of the note" type="color" id="color3"
                    name="colorPickerForNote" value="#80ff00">
                <button title="Use this button to delete this note" type="button" name="goRemoveNotes" id="removeBtn3"
                    class="btn btn-danger">Delete</button>

                <button type="button" class="btn btn-info" name="moveUpBtn"><i class="fa fa-arrow-up"
                        aria-hidden="true"></i></button>
                <button type="button" class="btn btn-info" name="moveDownBtn"><i class="fa fa-arrow-down"
                        aria-hidden="true"></i></button>

                <textarea class="notesTextArea" id="textArea3" name="goTextArea"></textarea>
                <label style="font-size: large;">Last Modified by:</label>
                <!-- <label id="lastModifiedBy3" class="labelForLastModifiedBy"></label> -->
                <input readonly id="lastModifiedBy3" class="labelForLastModifiedBy" name="labelForLastModifiedBy" oninput="trim()">
            </div>
            <div class="parent" style="background-color: #00ffff;" id="divForNC4">
                <!-- <h4 id="headerForNotes4" contenteditable="true" data-placeholder="Title..." class="headersNotes">
                    Characteristics</h4> -->
                <input name="headerForNotesName" placeholder="Title..." id="headerForNotes4" class="headersNotes"
                    value="Characteristics">
                <input title="Use this button to change the color of the note" type="color" id="color4"
                    name="colorPickerForNote" value="#00ffff">
                <button title="Use this button to delete this note" type="button" name="goRemoveNotes" id="removeBtn4"
                    class="btn btn-danger">Delete</button>

                <button type="button" class="btn btn-info" name="moveUpBtn"><i class="fa fa-arrow-up"
                        aria-hidden="true"></i></button>
                <button type="button" class="btn btn-info" name="moveDownBtn"><i class="fa fa-arrow-down"
                        aria-hidden="true"></i></button>

                <textarea class="notesTextArea" id="textArea4" name="goTextArea"></textarea>
                <label style="font-size: large;">Last Modified by:</label>
                <!-- <label id="lastModifiedBy4" class="labelForLastModifiedBy"></label> -->
                <input readonly id="lastModifiedBy4" class="labelForLastModifiedBy" name="labelForLastModifiedBy" oninput="trim()">
            </div>
            <div class="parent" style="background-color: #ff0000;" id="divForNC5">
                <!-- <h4 id="headerForNotes5" contenteditable="true" data-placeholder="Title..." class="headersNotes">
                    Strategy</h4> -->
                <input name="headerForNotesName" placeholder="Title..." id="headerForNotes5" class="headersNotes"
                    value="Strategy">
                <input title="Use this button to change the color of the note" type="color" id="color5"
                    name="colorPickerForNote" value="#ff0000">
                <button title="Use this button to delete this note" type="button" name="goRemoveNotes" id="removeBtn5"
                    class="btn btn-danger">Delete</button>

                <button type="button" class="btn btn-info" name="moveUpBtn"><i class="fa fa-arrow-up"
                        aria-hidden="true"></i></button>
                <button type="button" class="btn btn-info" name="moveDownBtn"><i class="fa fa-arrow-down"
                        aria-hidden="true"></i></button>

                <textarea class="notesTextArea" id="textArea5" name="goTextArea"></textarea>
                <label style="font-size: large;">Last Modified by:</label>
                <!-- <label id="lastModifiedBy5" class="labelForLastModifiedBy"></label> -->
                <input readonly id="lastModifiedBy5" class="labelForLastModifiedBy" name="labelForLastModifiedBy" oninput="trim()">
            </div>
            <div class="parent" style="background-color: #00ff40;" id="divForNC6">
                <!-- <h4 id="headerForNotes6" contenteditable="true" data-placeholder="Title..." class="headersNotes">
                    Environment</h4> -->
                <input name="headerForNotesName" placeholder="Title..." id="headerForNotes6" class="headersNotes"
                    value="Environment">
                <input title="Use this button to change the color of the note" type="color" id="color6"
                    name="colorPickerForNote" value="#00ff40">
                <button title="Use this button to delete this note" type="button" name="goRemoveNotes" id="removeBtn6"
                    class="btn btn-danger">Delete</button>

                <button type="button" class="btn btn-info" name="moveUpBtn"><i class="fa fa-arrow-up"
                        aria-hidden="true"></i></button>
                <button type="button" class="btn btn-info" name="moveDownBtn"><i class="fa fa-arrow-down"
                        aria-hidden="true"></i></button>

                <textarea class="notesTextArea" id="textArea6" name="goTextArea"></textarea>
                <label style="font-size: large;">Last Modified by:</label>
                <!-- <label id="lastModifiedBy6" class="labelForLastModifiedBy"></label> -->
                <input readonly id="lastModifiedBy6" class="labelForLastModifiedBy" name="labelForLastModifiedBy" oninput="trim()">
            </div>
            <div class="parent" style="background-color: #ff80ff;" id="divForNC7">
                <!-- <h4 id="headerForNotes7" contenteditable="true" data-placeholder="Title..." class="headersNotes">
                    Location</h4> -->
                <input name="headerForNotesName" placeholder="Title..." id="headerForNotes7" class="headersNotes"
                    value="Location">
                <input title="Use this button to change the color of the note" type="color" id="color7"
                    name="colorPickerForNote" value="#ff80ff">
                <button title="Use this button to delete this note" type="button" name="goRemoveNotes" id="removeBtn7"
                    class="btn btn-danger">Delete</button>

                <button type="button" class="btn btn-info" name="moveUpBtn"><i class="fa fa-arrow-up"
                        aria-hidden="true"></i></button>
                <button type="button" class="btn btn-info" name="moveDownBtn"><i class="fa fa-arrow-down"
                        aria-hidden="true"></i></button>

                <textarea class="notesTextArea" id="textArea7" name="goTextArea"></textarea>
                <label style="font-size: large;">Last Modified by:</label>
                <!-- <label id="lastModifiedBy7" class="labelForLastModifiedBy"></label> -->
                <input readonly id="lastModifiedBy7" class="labelForLastModifiedBy" name="labelForLastModifiedBy" oninput="trim()">
            </div>
            <div class="parent" style="background-color: #ff8040;" id="divForNC8">
                <!-- <h4 id="headerForNotes8" contenteditable="true" data-placeholder="Title..." class="headersNotes">
                    Constraints</h4> -->
                <input name="headerForNotesName" placeholder="Title..." id="headerForNotes8" class="headersNotes"
                    value="Constraints">
                <input title="Use this button to change the color of the note" type="color" id="color8"
                    name="colorPickerForNote" value="#ff8040">
                <button title="Use this button to delete this note" type="button" name="goRemoveNotes" id="removeBtn8"
                    class="btn btn-danger">Delete</button>

                <button type="button" class="btn btn-info" name="moveUpBtn"><i class="fa fa-arrow-up"
                        aria-hidden="true"></i></button>
                <button type="button" class="btn btn-info" name="moveDownBtn"><i class="fa fa-arrow-down"
                        aria-hidden="true"></i></button>

                <textarea class="notesTextArea" id="textArea8" name="goTextArea"></textarea>
                <label style="font-size: large;">Last Modified by:</label>
                <!-- <label id="lastModifiedBy8" class="labelForLastModifiedBy"></label> -->
                <input readonly id="lastModifiedBy8" class="labelForLastModifiedBy" name="labelForLastModifiedBy" oninput="trim()">
            </div>
            <div class="parent" style="background-color: #808040;" id="divForNC9">
                <!-- <h4 id="headerForNotes9" contenteditable="true" data-placeholder="Title..." class="headersNotes">
                    Resources</h4> -->
                <input name="headerForNotesName" placeholder="Title..." id="headerForNotes9" class="headersNotes"
                    value="Resources">
                <input title="Use this button to change the color of the note" type="color" id="color9"
                    name="colorPickerForNote" value="#808040">
                <button title="Use this button to delete this note" type="button" name="goRemoveNotes" id="removeBtn9"
                    class="btn btn-danger">Delete</button>

                <button type="button" class="btn btn-info" name="moveUpBtn"><i class="fa fa-arrow-up"
                        aria-hidden="true"></i></button>
                <button type="button" class="btn btn-info" name="moveDownBtn"><i class="fa fa-arrow-down"
                        aria-hidden="true"></i></button>

                <textarea class="notesTextArea" id="textArea9" name="goTextArea"></textarea>
                <label style="font-size: large;">Last Modified by:</label>
                <!-- <label id="lastModifiedBy9" class="labelForLastModifiedBy"></label> -->
                <input readonly id="lastModifiedBy9" class="labelForLastModifiedBy" name="labelForLastModifiedBy" oninput="trim()">
            </div>
            <div class="parent" style="background-color: #8080ff;" id="divForNC10">
                <!-- <h4 id="headerForNotes10" contenteditable="true" data-placeholder="Title..." class="headersNotes">
                    Activities</h4> -->
                <input name="headerForNotesName" placeholder="Title..." id="headerForNotes10" class="headersNotes"
                    value="Activities">
                <input title="Use this button to change the color of the note" type="color" id="color10"
                    name="colorPickerForNote" value="#8080ff">
                <button title="Use this button to delete this note" type="button" name="goRemoveNotes" id="removeBtn10"
                    class="btn btn-danger">Delete</button>

                <button type="button" class="btn btn-info" name="moveUpBtn"><i class="fa fa-arrow-up"
                        aria-hidden="true"></i></button>
                <button type="button" class="btn btn-info" name="moveDownBtn"><i class="fa fa-arrow-down"
                        aria-hidden="true"></i></button>

                <textarea class="notesTextArea" id="textArea10" name="goTextArea"></textarea>
                <label style="font-size: large;">Last Modified by:</label>
                <!-- <label id="lastModifiedBy10" class="labelForLastModifiedBy"></label> -->
                <input readonly id="lastModifiedBy10" class="labelForLastModifiedBy" name="labelForLastModifiedBy" oninput="trim()">
            </div>
            <div class="parent" style="background-color: #ff0080;" id="divForNC11">
                <!-- <h4 id="headerForNotes11" contenteditable="true" data-placeholder="Title..." class="headersNotes">
                    Process</h4> -->
                <input name="headerForNotesName" placeholder="Title..." id="headerForNotes11" class="headersNotes"
                    value="Process">
                <input title="Use this button to change the color of the note" type="color" id="color11"
                    name="colorPickerForNote" value="#ff0080">
                <button title="Use this button to delete this note" type="button" name="goRemoveNotes" id="removeBtn11"
                    class="btn btn-danger">Delete</button>

                <button type="button" class="btn btn-info" name="moveUpBtn"><i class="fa fa-arrow-up"
                        aria-hidden="true"></i></button>
                <button type="button" class="btn btn-info" name="moveDownBtn"><i class="fa fa-arrow-down"
                        aria-hidden="true"></i></button>

                <textarea class="notesTextArea" id="textArea11" name="goTextArea"></textarea>
                <label style="font-size: large;">Last Modified by:</label>
                <!-- <label id="lastModifiedBy11" class="labelForLastModifiedBy"></label> -->
                <input readonly id="lastModifiedBy11" class="labelForLastModifiedBy" name="labelForLastModifiedBy" oninput="trim()">
            </div>
        </div>
        <button type="button" class="btn btn-success" id="addNewNoteBtn">Add New Note</button>
        <br>
        <br>
        <br>
        <h1 style="text-align:center">LXD Timeline</h1>
        <!-- Vertical Timeline -->
        <section id="conference-timeline">
            <div class="timeline-start">
                <label>Start Time:</label>
                <br />
                <input name="startTimeInput" id="startTimeInput" type="text" value="00:00" readonly />
            </div>
            <div class="conference-center-line"></div>
            <div class="conference-timeline-content" id="containerBox">
                <div class="timeline-article">
                    <div class="content-left-container">
                        <div class="content-left" style="background-color: #8080ff">
                            <input name='headerForEventName' placeholder="Title..." class="headerForEvent" value="">
                            <textarea contenteditable="true" style="height: 400px" name="textAreasForEvents"></textarea>
                            <input title="Use this button to change the color of the note" type='color'
                                name="colorPickerForEvent" value="#8080ff" />
                            <label style="font-size: small;">Last Modified By:</label>
                            <input readonly class="labelSetForLastModified" name="labelSetForLastModified" value="" oninput="trim()">
                        </div>

                        <label>Duration:</label><br />
                        <input type="number" name="goDuration" style="width: 50px" min="0" max="23"
                            value=0 />&nbsp<label>hour(s)</label>&nbsp<input type="number" name="goMinutes"
                            style="width: 50px" min="0" max="59" value=0 />&nbsp<label>minute(s)</label>&nbsp
                        <button
                            title="Use this button to delete that specific event (This event cannot be deleted as the timeline needs to have at least 1 event)"
                            type="button" name="goRemoveEvents" class="btn clever-btn btn-2" data-toggle="modal"
                            data-target="#exampleModal"><i class="fa fa-trash" style="font-size: 18px; color: black;"></i></button>
                        <br />
                        <label hidden>Start Time:</label>
                        <br />
                        <input name="goTime" type="time" hidden />
                    </div>
                    <div class="content-right-container">
                        <div class="content-right" style="background-color: #80ff00">
                            <!-- <h4 contenteditable="true" id="uniqueheaderForEvent2" class="headerForEvent"
                                    data-placeholder="Title..."></h4> -->
                            <input name='headerForEventName' placeholder="Title..." class="headerForEvent" value="">
                            <textarea style="height: 400px" name="textAreasForEvents"></textarea>

                            <input title="Use this button to change the color of the note" type='color'
                                name="colorPickerForEvent" value="#80ff00" />
                            <label style="font-size: small;">Last Modified By:</label>
                            <input readonly class="labelSetForLastModified" name="labelSetForLastModified" value="" oninput="trim()">
                        </div>
                    </div>
                    <div class="meta-date">
                        <span class="date">00:00</span>
                        <input name="middleTimeHidden" value="00:00" hidden />
                    </div>

                    <button type="button" class="btn btn-info" name="moveUpBtnTL"
                        style="display: block; margin-left: auto; margin-right: auto; margin-bottom: 10px; margin-top: 150px;"><i
                            class="fa fa-arrow-up" aria-hidden="true"></i></button>
                    <button type="button" class="btn btn-info" name="moveDownBtnTL"
                        style="display: block; margin-left: auto; margin-right: auto; margin-bottom: 10px;"><i
                            class="fa fa-arrow-down" aria-hidden="true"></i></button>


                    <input title="Use this button to add an event" type="button" value="+" class="btn clever-btn btn-2"
                        name="goButton"
                        style="display: block; margin:auto; max-width: 300px; margin-top: 110px; background: #00b0bd; color: rgba(0, 0, 0, 0.50); font-size: xx-large;" />

                </div>
            </div>
            <div class="timeline-end">Total Duration
                <input class="endTime" type="text" readonly style="cursor: not-allowed;" />
            </div>
        </section>
        <!-- // Vertical Timeline -->

        <!-- For Overlays -->
        <div id="overlayForNotes">
            <div class="text">Loading......</div>
            <div class="loader"></div>
        </div>

        <div id="overlay">
            <div class="text">Loading......</div>
            <div class="loader"></div>
        </div>

        <!-- For Overlay For Form Submission -->
        <div id="overlayForFormSubmission">
            <div class="text">
                <div class="form-group">
                    <label for="nameOfLessonPlan">Name of Lesson Plan</label>
                    <input required type="text" id="nameOfLessonPlan" name="nameOfLessonPlan" class="form-control"
                        placeholder="Enter name of lesson plan"
                        value="<%= typeof nameOfLessonPlan != 'undefined' ? nameOfLessonPlan : '' %>">
                </div>
                <div class="form-group">
                    <label for="commitMsg">Commit Message</label>
                    <input required type="text" id="commitMsg" name="commitMsg" class="form-control"
                        placeholder="Enter commit messages"
                        value="<%= typeof commitMsg != 'undefined' ? commitMsg : '' %>">
                </div>
            </div>
            <button type="submit" id="submitFormSuccess" class="btn btn-default" >Save</button>
            <button type="button" id="submitFormFail" class="btn btn-default"
                onclick="makeSubmitFormOverlayGone()">Cancel</button>
            <!-- <input type="button" id="submitFormFail" class="btn btn-default" onclick="makeSubmitFormOverlayGone()" value="Cancel"> -->
        </div>

        <!-- For Overlay For Rearrange Notes
        <div id="overlayForSortingNotes">

            <ul id="sortable">
                <li class="ui-state-default"><span class="ui-icon ui-icon-arrowthick-2-n-s"></span>Item 1</li>
                <li class="ui-state-default"><span class="ui-icon ui-icon-arrowthick-2-n-s"></span>Item 2</li>
                <li class="ui-state-default"><span class="ui-icon ui-icon-arrowthick-2-n-s"></span>Item 3</li>
                <li class="ui-state-default"><span class="ui-icon ui-icon-arrowthick-2-n-s"></span>Item 4</li>
                <li class="ui-state-default"><span class="ui-icon ui-icon-arrowthick-2-n-s"></span>Item 5</li>
                <li class="ui-state-default"><span class="ui-icon ui-icon-arrowthick-2-n-s"></span>Item 6</li>
                <li class="ui-state-default"><span class="ui-icon ui-icon-arrowthick-2-n-s"></span>Item 7</li>
              </ul>
        </div> -->


        <h4>Post-lesson survey:</h4>
        <div id="LinkDiv">
            <table class="table table-striped table-responsive" name="tableForLinks" id="tableForLinks">
                <thead>
                    <tr>
                        <th scope="col">Links</th>
                        <th scope="col">Actions</th>
                    </tr>
                </thead>
                <tbody>
                    <% for (var indexForlink=0; indexForlink < 0; indexForlink++) { %>
                        <tr>
                            <td><a href="" target="_blank" name="postLessonSurveyLink" value="" hidden></a>
                                <input name="postLessonSurveyLinkTbb" type="url" class="form-control col mr-2" value=""
                                    hidden>
                            </td>
                            <td>
                                <button class="btn btn-danger mt-2" name="deleteLinkBtn" type="button"
                                    data-toggle="modal" data-target="#exampleModal"> Delete</button>
                            </td>
                        </tr>
                        <% } %>
                </tbody>
            </table>
            <!-- ErrorMessage for Post-lesson Survey link -->
            <div id="alertErrorsForLink">
            </div>
            <form class="my-4 form-inline">
                <input name="postLessonSurveyLinkTb" id="postLessonSurveyLinkTb" type="url" placeholder="Enter the link"
                    class="form-control col mr-2">
                <br />
                <button class="btn btn-success" style="float: right;" name="addLinkBtn" type="button">Add Link</button>
            </form>
            <br />
            <br />
            <h4>Comments:</h4>

            <div class="comment-container" id="commentcontainerID">

                <div class="commentsDivLeft">
                    <label class="commentsLabel">Author's</label>
                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;

                    <textarea class="commentsInput" name="commentsTA"></textarea>
                    <label style="font-size: x-large; ">Edited by:</label>
                    <input readonly class="commentsEditedBy" name="CommentsEditedBy" value="<%= name %>" oninput='trim()'>
                </div>

                <div class="commentsDivRight">
                    <br />
                    <br />
                    <label style="font-weight: bold;" hidden="false" id="CommentingIsUnavailableLbl">Commenting is
                        unavailable</label>
                </div>


            </div>

            <!-- Add comment button and checkbox for enable comment or not -->
            <h4>
                <!-- <button type="button" class="btn btn-default" style="font-size: xxx-large; margin-left: 30px;" name="addCommentBtn" id="addCommentBtn" disabled>
                <i class="fa fa-plus" aria-hidden="true"></i>
            </button> -->
                <div class="form-check" style="margin-left: 30px;">
                    <input type="checkbox" class="form-check-input" id="EnableCommentCB" name="EnableCommentCB"
                        value="true" checked>
                    <label class="form-check-label" for="EnableCommentCB">Enable others to comment?</label>
                </div>

                <!-- <input id="hiddenEnableCommentValue" name="hiddenEnableCommentValue" type="text" value="true" hidden> -->
            </h4>

        </div>
    </form>

    <!-- Modal -->
    <div id="ModalPopUpForDeletion">
        <div class="modal fade" id="exampleModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel"
            aria-hidden="true">
            <div class="modal-dialog" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="exampleModalLabel"></h5>
                        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                            <span aria-hidden="true">&times;</span>
                        </button>
                    </div>
                    <div class="modal-body" id="modal-bodyID">
                        <!-- delete msg here -->
                    </div>
                    <div class="modal-footer" id="modalfooter" name="modalfooter">
                        <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                        <button type="button" name="ConfirmDeleteBtnInModal" id="ConfirmDeleteBtnInModal"
                            class="btn btn-danger mt-2"> Delete</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <script>

        $(document).ready(function () {

            // All Notes related that has an id: 1) outer div, 2) header, 3) textarea, 4) colorpicker 5) delete button 6) move up button 7) move down button
            var noOfDivForNC = $('.parent').length;
            var indexForDivForNC = 0;
            do {
                var notesDivForNCThatBelongsThere = $('.parent').eq(indexForDivForNC);
                var colorPickerThere = $('input[name$="colorPickerForNote"]').eq(indexForDivForNC);
                indexForDivForNC++;
                notesDivForNCThatBelongsThere.attr("id", "divForNC" + indexForDivForNC);
                colorPickerThere.attr("id", "color" + indexForDivForNC);
            } while (indexForDivForNC < noOfDivForNC);

            var removeNotesBtnItems = $('button[name$="goRemoveNotes"]').length;
            var indexForRemoveNotesBtn = 0;
            do {
                var deleteNoteBtnThatBelongsThere = $('button[name$="goRemoveNotes"]').eq(indexForRemoveNotesBtn);
                indexForRemoveNotesBtn++;
                deleteNoteBtnThatBelongsThere.attr("id", "removeBtn" + indexForRemoveNotesBtn);
            } while (indexForRemoveNotesBtn < removeNotesBtnItems);

            var noOfTextAreaForNotes = $('textarea[name$="goTextArea"]').length;
            var indexForTextAreaForNotes = 0;
            do {
                var textAreaForNotesThatBelongsThere = $('textarea[name$="goTextArea"]').eq(indexForTextAreaForNotes);
                var lastModifiedLabelForNotes = $('.labelForLastModifiedBy').eq(indexForTextAreaForNotes);
                indexForTextAreaForNotes++;
                textAreaForNotesThatBelongsThere.attr("id", "textArea" + indexForTextAreaForNotes);
                lastModifiedLabelForNotes.attr("id", "lastModifiedBy" + indexForTextAreaForNotes);
            } while (indexForTextAreaForNotes < noOfTextAreaForNotes);

            var noOfHeadersForNotes = $('.headersNotes').length;
            var indexForHeaderForNotes = 0;
            do {
                var headersForNotesThatBelongsThere = $('.headersNotes').eq(indexForHeaderForNotes);
                indexForHeaderForNotes++;
                headersForNotesThatBelongsThere.attr("id", "headerForNotes" + indexForHeaderForNotes);
            } while (indexForHeaderForNotes < noOfHeadersForNotes);

            var moveUpBtnItems = $('button[name$="moveUpBtn"]').length;
            var indexFormoveUpBtn = 0;
            do {
                var moveUpBtnThatBelongsThere = $('button[name$="moveUpBtn"]').eq(indexFormoveUpBtn);
                indexFormoveUpBtn++;
                moveUpBtnThatBelongsThere.attr("id", "moveUpBtn" + indexFormoveUpBtn);
            } while (indexFormoveUpBtn < moveUpBtnItems);

            var moveDownBtnItems = $('button[name$="moveDownBtn"]').length;
            var indexFormoveDownBtn = 0;
            do {
                var moveDownBtnThatBelongsThere = $('button[name$="moveDownBtn"]').eq(indexFormoveDownBtn);
                indexFormoveDownBtn++;
                moveDownBtnThatBelongsThere.attr("id", "moveDownBtn" + indexFormoveDownBtn);
            } while (indexFormoveDownBtn < moveDownBtnItems);
            //Notes end






            //Comment section
            var commentsTAItems = $('textarea[name$="commentsTA"]').length;
            var indexForcommentsTA = 0;
            do {
                var commentsTAThatBelongsThere = $('textarea[name$="commentsTA"]').eq(indexForcommentsTA);
                indexForcommentsTA++;
                commentsTAThatBelongsThere.attr("id", "commentsTA" + indexForcommentsTA);
            } while (indexForcommentsTA < commentsTAItems);

            var CommentsEditedByItems = $('input[name$="CommentsEditedBy"]').length;
            var indexForCommentsEditedBy = 0;
            do {
                var CommentsEditedByThatBelongsThere = $('input[name$="CommentsEditedBy"]').eq(indexForCommentsEditedBy);
                indexForCommentsEditedBy++;
                CommentsEditedByThatBelongsThere.attr("id", "CommentsEditedBy" + indexForCommentsEditedBy);
            } while (indexForCommentsEditedBy < CommentsEditedByItems);
            //Comment section ends







            //Post-Lesson Survey link
            var postLessonSurveyLinkItems = $('a[name$="postLessonSurveyLink"]').length;
            var indexForpostLessonSurveyLink = 0;
            do {
                var postLessonSurveyLinkThatBelongsThere = $('a[name$="postLessonSurveyLink"]').eq(indexForpostLessonSurveyLink);
                indexForpostLessonSurveyLink++;
                postLessonSurveyLinkThatBelongsThere.attr("id", "postLessonSurveyLink" + indexForpostLessonSurveyLink);
            } while (indexForpostLessonSurveyLink < postLessonSurveyLinkItems);


            var deleteLinkBtnItems = $('button[name$="deleteLinkBtn"]').length;
            var indexFordeleteLinkBtn = 0;
            do {
                var deleteLinkBtnThatBelongsThere = $('button[name$="deleteLinkBtn"]').eq(indexFordeleteLinkBtn);
                indexFordeleteLinkBtn++;
                deleteLinkBtnThatBelongsThere.attr("id", "deleteLinkBtn" + indexFordeleteLinkBtn);
            } while (indexFordeleteLinkBtn < deleteLinkBtnItems);


            var postLessonSurveyLinkTbbItems = $('input[name$="postLessonSurveyLinkTbb"]').length;
            var indexForpostLessonSurveyLinkTbb = 0;
            do {
                var postLessonSurveyLinkTbbThatBelongsThere = $('input[name$="postLessonSurveyLinkTbb"]').eq(indexForpostLessonSurveyLinkTbb);
                indexForpostLessonSurveyLinkTbb++;
                postLessonSurveyLinkTbbThatBelongsThere.attr("id", "postLessonSurveyLinkTbb" + indexForpostLessonSurveyLinkTbb);
            } while (indexForpostLessonSurveyLinkTbb < postLessonSurveyLinkTbbItems);
            //Post-lesson survey link ends





            // All Event related that has an id: 1) colorPicker, 2) Hour/Duration, 3) Minutes, 4) Start Time, 5) Add Event, 6) Remove Event, 7) timeline-article, 8) content-left, 9) textarea, 10) content-right, 11) headerForEvent, 12) span Circle
            var durationItem = $('input[name$="goDuration"]').length;
            var i = 0;
            do {
                var durationInputThatBelongsThere = $('input[name$="goDuration"]').eq(i);
                var circleSpanThatBelongsThere = $('.date').eq(i)
                i++;
                durationInputThatBelongsThere.attr("id", "addDurationInput" + i);
                circleSpanThatBelongsThere.attr("id", "circleForEvent" + i);
            } while (i < durationItem);

            var minutesItem = $('input[name$="goMinutes"]').length;
            var j = 0;
            do {
                var minutesInputThatBelongsThere = $('input[name$="goMinutes"]').eq(j);
                j++;
                minutesInputThatBelongsThere.attr("id", "addMinutesInput" + j);
            } while (j < minutesItem);

            var startTimeItem = $('input[name$="goTime"]').length;
            var b = 0;
            do {
                var startTimeInputThatBelongsThere = $('input[name$="goTime"]').eq(b);
                b++;
                startTimeInputThatBelongsThere.attr("id", "inputForStartTime" + b);
            } while (b < startTimeItem);

            var addEventBtnItem = $('input[name$="goButton"]').length;
            var x = 0;
            do {
                var eventBtnThatBelongsThere = $('input[name$="goButton"]').eq(x);
                x++;
                eventBtnThatBelongsThere.attr("id", "addEventBtn" + x);
            } while (x < addEventBtnItem);

            var removeEventBtnItem = $('button[name$="goRemoveEvents"]').length;
            var y = 0;
            do {
                var deleteBtnThatBelongsThere = $('button[name$="goRemoveEvents"]').eq(y);
                y++;
                deleteBtnThatBelongsThere.attr("id", "removeEventBtn" + y);
            } while (y < removeEventBtnItem);

            var noOfTimeLine = $('.timeline-article').length;
            var z = 0;
            do {
                var eventThatBelongsThere = $('.timeline-article').eq(z);
                z++;
                eventThatBelongsThere.attr("id", "eventSet" + z);
            } while (z < noOfTimeLine);

            var noOfLeftEvent = $('.content-left').length;
            var indexForNoOfLeftEvent = 0;
            var noToGiveForNoOfLeftEvent = 1;
            do {
                var leftEventThatBelongsThere = $('.content-left').eq(indexForNoOfLeftEvent);
                leftEventThatBelongsThere.attr("id", "divForCPE" + noToGiveForNoOfLeftEvent);
                indexForNoOfLeftEvent++;
                noToGiveForNoOfLeftEvent += 2;
            } while (indexForNoOfLeftEvent < noOfLeftEvent);

            var noOfTextAreaEvent = $('textarea[name$="textAreasForEvents"]').length;
            var indexForNoOfTextAreaEvent = 0;
            do {
                var textAreaEventThatBelongsThere = $('textarea[name$="textAreasForEvents"]').eq(indexForNoOfTextAreaEvent);
                var labelSetForLastModified = $('.labelSetForLastModified').eq(indexForNoOfTextAreaEvent);
                indexForNoOfTextAreaEvent++;
                textAreaEventThatBelongsThere.attr("id", "textAreaSet" + indexForNoOfTextAreaEvent);
                labelSetForLastModified.attr("id", "lastModifiedBySet" + indexForNoOfTextAreaEvent);
            } while (indexForNoOfTextAreaEvent < noOfTextAreaEvent);

            var noOfRightEvent = $('.content-right').length;
            var indexForNoOfRightEvent = 0;
            var noToGiveForNoOfRightEvent = 2;
            do {
                var rightEventThatBelongsThere = $('.content-right').eq(indexForNoOfRightEvent);
                rightEventThatBelongsThere.attr("id", "divForCPE" + noToGiveForNoOfRightEvent);
                indexForNoOfRightEvent++;
                noToGiveForNoOfRightEvent += 2;
            } while (indexForNoOfRightEvent < noOfRightEvent);

            var noOfHeaderForEvent = $('.headerForEvent').length;
            var indexForHeaderForEvent = 0;
            do {
                var headerEventThatBelongsThere = $('.headerForEvent').eq(indexForHeaderForEvent);
                indexForHeaderForEvent++;
                headerEventThatBelongsThere.attr("id", "uniqueheaderForEvent" + indexForHeaderForEvent);
            } while (indexForHeaderForEvent < noOfHeaderForEvent);

            var noOfColorPickerEvent = $('input[name$="colorPickerForEvent"]').length;
            var indexForColorInputEvent = 0;
            do {
                var colorPickerEventThatBelongsThere = $('input[name$="colorPickerForEvent"]').eq(indexForColorInputEvent);
                indexForColorInputEvent++;
                colorPickerEventThatBelongsThere.attr("id", "colorForEvent" + indexForColorInputEvent);
            } while (indexForColorInputEvent < noOfColorPickerEvent);

            var moveUpBtnTLItems = $('button[name$="moveUpBtnTL"]').length;
            var indexFormoveUpBtnTL = 0;
            var idFormoveUpBtnTL = 0;
            do {
                var moveUpBtnTLThatBelongsThere = $('button[name$="moveUpBtnTL"]').eq(indexFormoveUpBtnTL);
                indexFormoveUpBtnTL++;
                idFormoveUpBtnTL += 2;
                moveUpBtnTLThatBelongsThere.attr("id", "moveUpBtnTL" + idFormoveUpBtnTL);
            } while (indexFormoveUpBtnTL < moveUpBtnTLItems);

            var moveDownBtnTLItems = $('button[name$="moveDownBtnTL"]').length;
            var indexFormoveDownBtnTL = 0;
            var idFormoveDownBtnTL = 0;
            do {
                var moveDownBtnTLThatBelongsThere = $('button[name$="moveDownBtnTL"]').eq(indexFormoveDownBtnTL);
                indexFormoveDownBtnTL++;
                idFormoveDownBtnTL += 2;
                moveDownBtnTLThatBelongsThere.attr("id", "moveDownBtnTL" + idFormoveDownBtnTL);
            } while (indexFormoveDownBtnTL < moveDownBtnTLItems);


            var noOfmiddleTimeHidden = $('input[name$="middleTimeHidden"]').length;
            var indexFormiddleTimeHidden = 0;
            do {
                var middleTimeHiddenThatBelongsThere = $('input[name$="middleTimeHidden"]').eq(indexFormiddleTimeHidden);
                indexFormiddleTimeHidden++;
                middleTimeHiddenThatBelongsThere.attr("id", "middleTimeHidden" + indexFormiddleTimeHidden);
            } while (indexFormiddleTimeHidden < noOfmiddleTimeHidden);
            //Event ends




            //If start time is not empty, the first green circle will have the start time value
            if (document.getElementById("startTimeInput").value != '') {
                var firstCircle = $('.date').eq(0);
                firstCircle.html(document.getElementById("startTimeInput").value);
                document.getElementById("middleTimeHidden1").value = document.getElementById("startTimeInput").value;
            }


            //Count number of green circle
            var circleForTimeCount = $('.date').length;

            for (t = 1; t <= circleForTimeCount; t++) {

                var circleTime = document.getElementById("middleTimeHidden" + t).value;

                var previousStartTime = circleTime;
                var previousgoDuration = document.getElementById("addDurationInput" + t).value;
                var previousgoMinutes = document.getElementById("addMinutesInput" + t).value;

                //There must be start time, duration and minutes input
                //Calculate the time
                if (previousStartTime != '' && previousgoDuration != '' && previousgoMinutes != '') {
                    var strTime = previousStartTime.split(":");
                    var theHour = parseInt(strTime[0]);
                    var theMin = parseInt(strTime[1]);

                    //The previous start time's minute add the minutes user input
                    theMin += parseInt(previousgoMinutes);
                    var NumberOfHoursIntheMinutes = Math.floor((theMin / 60));
                    theMin -= (NumberOfHoursIntheMinutes * 60);

                    //Add the number of hours the minute exceeds 60 minute
                    theHour += NumberOfHoursIntheMinutes + parseInt(previousgoDuration);

                    if (theHour >= 24) {
                        theHour -= 24;
                    }

                    if (theHour < 10) {
                        theHour = "0" + theHour;
                    }

                    if (theMin < 10) {
                        theMin = "0" + theMin;
                    }

                    //Display end time
                    var theendTime = $('.endTime').eq(0);
                    theendTime.val(theHour + ":" + theMin);

                    //The next green circle has the increased time
                    if (document.getElementById("middleTimeHidden" + (t + 1)) != undefined) {
                        var theCircleTime = $('.date').eq(t);
                        theCircleTime.html(theHour + ":" + theMin);
                        document.getElementById("middleTimeHidden" + (t + 1)).value = theHour + ":" + theMin;
                    }
                }
            }





            var newscript = document.createElement('script');
            var insidescript = document.createTextNode("tinymce.init({selector: 'textarea:not(.commentsInput)', init_instance_callback: function(editor) {editor.on('keyup', function(e) {console.log(editor.id + ' was edited' ); var theEditorId = editor.id; if(theEditorId.includes('Set')) {var justTheNumberFromSet = theEditorId.substring(11, theEditorId.length); var lastModifiedByLabel = 'lastModifiedBySet' + justTheNumberFromSet; document.getElementById(lastModifiedByLabel).value = document.getElementById('userNameHere').innerText;} else {var justTheNumber = theEditorId.substring(8, theEditorId.length); var noteLastModifiedLabel = 'lastModifiedBy' + justTheNumber; document.getElementById(noteLastModifiedLabel).value = document.getElementById('userNameHere').innerText;} });}, content_css: '//www.tiny.cloud/css/codepen.min.css', plugins: 'print preview searchreplace autolink autosave save directionality visualblocks visualchars fullscreen image link media template codesample table charmap hr pagebreak nonbreaking anchor toc insertdatetime advlist lists wordcount imagetools textpattern noneditable help charmap emoticons', toolbar: 'undo redo | bold italic underline strikethrough | fontselect fontsizeselect formatselect | alignleft aligncenter alignright alignjustify | outdent indent |  numlist bullist | forecolor backcolor removeformat | pagebreak | charmap emoticons | fullscreen  preview save print | insertfile image media template link anchor codesample | a11ycheck ltr rtl | showcomments addcomment', image_title: true, automatic_uploads: true, file_picker_types: 'image', file_picker_callback: function (cb, value, meta) {var input = document.createElement('input'); input.setAttribute('type', 'file'); input.setAttribute('accept', 'image/*'); input.onchange = function () { var file = this.files[0]; var reader = new FileReader(); reader.onload = function () { var id = 'blobid' + (new Date()).getTime(); var base64 = reader.result.split(',')[1]; var blobInfo = blobCache.create(id, file, base64); blobCache.add(blobInfo); cb(blobInfo.blobUri(), { title: file.name }); }; reader.readAsDataURL(file); }; input.click();}});");
            newscript.appendChild(insidescript);
            $("textarea").append(newscript);

            $('#removeEventBtn1').attr("disabled", true);
            document.getElementById('removeEventBtn1').style.cursor = "not-allowed";


            // Putting hour (duration), minutes and time into respective place
            var noOfTempDurationHolder = $('.displayDuration').length;
            var indexForTempDurationHolder = 0;
            do {
                var theTempDurationHolder = $('.displayDuration').eq(indexForTempDurationHolder);
                indexForTempDurationHolder++;
                theTempDurationHolder.attr("id", "displayDuration" + indexForTempDurationHolder);
            } while (indexForTempDurationHolder < noOfTempDurationHolder);

            var noOfTempMinutesHolder = $('.displayMinutes').length;
            var indexForTempMinutesHolder = 0;
            do {
                var theTempMinutesHolder = $('.displayMinutes').eq(indexForTempMinutesHolder);
                indexForTempMinutesHolder++;
                theTempMinutesHolder.attr("id", "displayMinutes" + indexForTempMinutesHolder);
            } while (indexForTempMinutesHolder < noOfTempMinutesHolder);

            var noOfTempTimeHolder = $('.displayTime').length;
            var indexForTempTimeHolder = 0;
            do {
                var theTempTimeHolder = $('.displayTime').eq(indexForTempTimeHolder);
                indexForTempTimeHolder++;
                theTempTimeHolder.attr("id", "displayTime" + indexForTempTimeHolder);
            } while (indexForTempTimeHolder < noOfTempTimeHolder);

            var noOfTempHolders = $('.displayDuration').length;
            // Put in respective place
            for (indexForPlacing = 1; indexForPlacing <= noOfTempHolders; indexForPlacing++) {
                var thatDuration = "addDurationInput" + indexForPlacing;
                var thatTempDuration = "displayDuration" + indexForPlacing;
                document.getElementById(thatDuration).value = document.getElementById(thatTempDuration).value;
                var thatMinutes = "addMinutesInput" + indexForPlacing;
                var thatTempMinutes = "displayMinutes" + indexForPlacing;
                document.getElementById(thatMinutes).value = document.getElementById(thatTempMinutes).value;
                var thatTime = "inputForStartTime" + indexForPlacing;
                var thatTempTime = "displayTime" + indexForPlacing;
                document.getElementById(thatTime).value = document.getElementById(thatTempTime).value;
            }
        });



        function checkeverytime() {
            // All Notes related that has an id: 1) outer div, 2) header, 3) textarea, 4) colorpicker 5) delete button
            var noOfDivForNC = $('.parent').length;
            var indexForDivForNC = 0;
            do {
                var notesDivForNCThatBelongsThere = $('.parent').eq(indexForDivForNC);
                var colorPickerThere = $('input[name$="colorPickerForNote"]').eq(indexForDivForNC);
                indexForDivForNC++;
                notesDivForNCThatBelongsThere.attr("id", "divForNC" + indexForDivForNC);
                colorPickerThere.attr("id", "color" + indexForDivForNC);
            } while (indexForDivForNC < noOfDivForNC);

            var removeNotesBtnItems = $('button[name$="goRemoveNotes"]').length;
            var indexForRemoveNotesBtn = 0;
            do {
                var deleteNoteBtnThatBelongsThere = $('button[name$="goRemoveNotes"]').eq(indexForRemoveNotesBtn);
                indexForRemoveNotesBtn++;
                deleteNoteBtnThatBelongsThere.attr("id", "removeBtn" + indexForRemoveNotesBtn);
            } while (indexForRemoveNotesBtn < removeNotesBtnItems);

            var noOfTextAreaForNotes = $('textarea[name$="goTextArea"]').length;
            var indexForTextAreaForNotes = 0;
            do {
                var textAreaForNotesThatBelongsThere = $('textarea[name$="goTextArea"]').eq(indexForTextAreaForNotes);
                var lastModifiedLabelForNotes = $('.labelForLastModifiedBy').eq(indexForTextAreaForNotes);
                indexForTextAreaForNotes++;
                textAreaForNotesThatBelongsThere.attr("id", "textArea" + indexForTextAreaForNotes);
                lastModifiedLabelForNotes.attr("id", "lastModifiedBy" + indexForTextAreaForNotes);
            } while (indexForTextAreaForNotes < noOfTextAreaForNotes);

            var noOfHeadersForNotes = $('.headersNotes').length;
            var indexForHeaderForNotes = 0;
            do {
                var headersForNotesThatBelongsThere = $('.headersNotes').eq(indexForHeaderForNotes);
                indexForHeaderForNotes++;
                headersForNotesThatBelongsThere.attr("id", "headerForNotes" + indexForHeaderForNotes);
            } while (indexForHeaderForNotes < noOfHeadersForNotes);

            var moveUpBtnItems = $('button[name$="moveUpBtn"]').length;
            var indexFormoveUpBtn = 0;
            do {
                var moveUpBtnThatBelongsThere = $('button[name$="moveUpBtn"]').eq(indexFormoveUpBtn);
                indexFormoveUpBtn++;
                moveUpBtnThatBelongsThere.attr("id", "moveUpBtn" + indexFormoveUpBtn);
            } while (indexFormoveUpBtn < moveUpBtnItems);

            var moveDownBtnItems = $('button[name$="moveDownBtn"]').length;
            var indexFormoveDownBtn = 0;
            do {
                var moveDownBtnThatBelongsThere = $('button[name$="moveDownBtn"]').eq(indexFormoveDownBtn);
                indexFormoveDownBtn++;
                moveDownBtnThatBelongsThere.attr("id", "moveDownBtn" + indexFormoveDownBtn);
            } while (indexFormoveDownBtn < moveDownBtnItems);
            //Notes end




            //Comment section
            var commentsTAItems = $('textarea[name$="commentsTA"]').length;
            var indexForcommentsTA = 0;
            do {
                var commentsTAThatBelongsThere = $('textarea[name$="commentsTA"]').eq(indexForcommentsTA);
                indexForcommentsTA++;
                commentsTAThatBelongsThere.attr("id", "commentsTA" + indexForcommentsTA);
            } while (indexForcommentsTA < commentsTAItems);

            var CommentsEditedByItems = $('input[name$="CommentsEditedBy"]').length;
            var indexForCommentsEditedBy = 0;
            do {
                var CommentsEditedByThatBelongsThere = $('input[name$="CommentsEditedBy"]').eq(indexForCommentsEditedBy);
                indexForCommentsEditedBy++;
                CommentsEditedByThatBelongsThere.attr("id", "CommentsEditedBy" + indexForCommentsEditedBy);
            } while (indexForCommentsEditedBy < CommentsEditedByItems);
            //Comment section ends






            //Post-Lesson Survey link
            var postLessonSurveyLinkItems = $('a[name$="postLessonSurveyLink"]').length;
            var indexForpostLessonSurveyLink = 0;
            do {
                var postLessonSurveyLinkThatBelongsThere = $('a[name$="postLessonSurveyLink"]').eq(indexForpostLessonSurveyLink);
                indexForpostLessonSurveyLink++;
                postLessonSurveyLinkThatBelongsThere.attr("id", "postLessonSurveyLink" + indexForpostLessonSurveyLink);
            } while (indexForpostLessonSurveyLink < postLessonSurveyLinkItems);


            var deleteLinkBtnItems = $('button[name$="deleteLinkBtn"]').length;
            var indexFordeleteLinkBtn = 0;
            do {
                var deleteLinkBtnThatBelongsThere = $('button[name$="deleteLinkBtn"]').eq(indexFordeleteLinkBtn);
                indexFordeleteLinkBtn++;
                deleteLinkBtnThatBelongsThere.attr("id", "deleteLinkBtn" + indexFordeleteLinkBtn);
            } while (indexFordeleteLinkBtn < deleteLinkBtnItems);


            var postLessonSurveyLinkTbbItems = $('input[name$="postLessonSurveyLinkTbb"]').length;
            var indexForpostLessonSurveyLinkTbb = 0;
            do {
                var postLessonSurveyLinkTbbThatBelongsThere = $('input[name$="postLessonSurveyLinkTbb"]').eq(indexForpostLessonSurveyLinkTbb);
                indexForpostLessonSurveyLinkTbb++;
                postLessonSurveyLinkTbbThatBelongsThere.attr("id", "postLessonSurveyLinkTbb" + indexForpostLessonSurveyLinkTbb);
            } while (indexForpostLessonSurveyLinkTbb < postLessonSurveyLinkTbbItems);
            //Post-Lesson Survey link ends





            // All Event related that has an id: 1) colorPicker, 2) Hour/Duration, 3) Minutes, 4) Start Time, 5) Add Event, 6) Remove Event, 7) timeline-article, 8) content-left, 9) textarea, 10) content-right, 11) headerForEvent, 12) span Circle
            var durationItem = $('input[name$="goDuration"]').length;
            var i = 0;
            do {
                var durationInputThatBelongsThere = $('input[name$="goDuration"]').eq(i);
                var circleSpanThatBelongsThere = $('.date').eq(i)
                i++;
                durationInputThatBelongsThere.attr("id", "addDurationInput" + i);
                circleSpanThatBelongsThere.attr("id", "circleForEvent" + i);
            } while (i < durationItem);

            var minutesItem = $('input[name$="goMinutes"]').length;
            var j = 0;
            do {
                var minutesInputThatBelongsThere = $('input[name$="goMinutes"]').eq(j);
                j++;
                minutesInputThatBelongsThere.attr("id", "addMinutesInput" + j);
            } while (j < minutesItem);

            var startTimeItem = $('input[name$="goTime"]').length;
            var b = 0;
            do {
                var startTimeInputThatBelongsThere = $('input[name$="goTime"]').eq(b);
                b++;
                startTimeInputThatBelongsThere.attr("id", "inputForStartTime" + b);
            } while (b < startTimeItem);

            var addEventBtnItem = $('input[name$="goButton"]').length;
            var x = 0;
            do {
                var eventBtnThatBelongsThere = $('input[name$="goButton"]').eq(x);
                x++;
                eventBtnThatBelongsThere.attr("id", "addEventBtn" + x);
            } while (x < addEventBtnItem);

            var removeEventBtnItem = $('button[name$="goRemoveEvents"]').length;
            var y = 0;
            do {
                var deleteBtnThatBelongsThere = $('button[name$="goRemoveEvents"]').eq(y);
                y++;
                deleteBtnThatBelongsThere.attr("id", "removeEventBtn" + y);
            } while (y < removeEventBtnItem);

            var noOfTimeLine = $('.timeline-article').length;
            var z = 0;
            do {
                var eventThatBelongsThere = $('.timeline-article').eq(z);
                z++;
                eventThatBelongsThere.attr("id", "eventSet" + z);
            } while (z < noOfTimeLine);

            var noOfLeftEvent = $('.content-left').length;
            var indexForNoOfLeftEvent = 0;
            var noToGiveForNoOfLeftEvent = 1;
            do {
                var leftEventThatBelongsThere = $('.content-left').eq(indexForNoOfLeftEvent);
                leftEventThatBelongsThere.attr("id", "divForCPE" + noToGiveForNoOfLeftEvent);
                indexForNoOfLeftEvent++;
                noToGiveForNoOfLeftEvent += 2;
            } while (indexForNoOfLeftEvent < noOfLeftEvent);

            var noOfTextAreaEvent = $('textarea[name$="textAreasForEvents"]').length;
            var indexForNoOfTextAreaEvent = 0;
            do {
                var textAreaEventThatBelongsThere = $('textarea[name$="textAreasForEvents"]').eq(indexForNoOfTextAreaEvent);
                var labelSetForLastModified = $('.labelSetForLastModified').eq(indexForNoOfTextAreaEvent);
                indexForNoOfTextAreaEvent++;
                textAreaEventThatBelongsThere.attr("id", "textAreaSet" + indexForNoOfTextAreaEvent);
                labelSetForLastModified.attr("id", "lastModifiedBySet" + indexForNoOfTextAreaEvent);
            } while (indexForNoOfTextAreaEvent < noOfTextAreaEvent);

            var noOfRightEvent = $('.content-right').length;
            var indexForNoOfRightEvent = 0;
            var noToGiveForNoOfRightEvent = 2;
            do {
                var rightEventThatBelongsThere = $('.content-right').eq(indexForNoOfRightEvent);
                rightEventThatBelongsThere.attr("id", "divForCPE" + noToGiveForNoOfRightEvent);
                indexForNoOfRightEvent++;
                noToGiveForNoOfRightEvent += 2;
            } while (indexForNoOfRightEvent < noOfRightEvent);

            var noOfHeaderForEvent = $('.headerForEvent').length;
            var indexForHeaderForEvent = 0;
            do {
                var headerEventThatBelongsThere = $('.headerForEvent').eq(indexForHeaderForEvent);
                indexForHeaderForEvent++;
                headerEventThatBelongsThere.attr("id", "uniqueheaderForEvent" + indexForHeaderForEvent);
            } while (indexForHeaderForEvent < noOfHeaderForEvent);

            var noOfColorPickerEvent = $('input[name$="colorPickerForEvent"]').length;
            var indexForColorInputEvent = 0;
            do {
                var colorPickerEventThatBelongsThere = $('input[name$="colorPickerForEvent"]').eq(indexForColorInputEvent);
                indexForColorInputEvent++;
                colorPickerEventThatBelongsThere.attr("id", "colorForEvent" + indexForColorInputEvent);
            } while (indexForColorInputEvent < noOfColorPickerEvent);

            var moveUpBtnTLItems = $('button[name$="moveUpBtnTL"]').length;
            var indexFormoveUpBtnTL = 0;
            var idFormoveUpBtnTL = 0;
            do {
                var moveUpBtnTLThatBelongsThere = $('button[name$="moveUpBtnTL"]').eq(indexFormoveUpBtnTL);
                indexFormoveUpBtnTL++;
                idFormoveUpBtnTL += 2;
                moveUpBtnTLThatBelongsThere.attr("id", "moveUpBtnTL" + idFormoveUpBtnTL);
            } while (indexFormoveUpBtnTL < moveUpBtnTLItems);

            var moveDownBtnTLItems = $('button[name$="moveDownBtnTL"]').length;
            var indexFormoveDownBtnTL = 0;
            var idFormoveDownBtnTL = 0;
            do {
                var moveDownBtnTLThatBelongsThere = $('button[name$="moveDownBtnTL"]').eq(indexFormoveDownBtnTL);
                indexFormoveDownBtnTL++;
                idFormoveDownBtnTL += 2;
                moveDownBtnTLThatBelongsThere.attr("id", "moveDownBtnTL" + idFormoveDownBtnTL);
            } while (indexFormoveDownBtnTL < moveDownBtnTLItems);

            var noOfmiddleTimeHidden = $('input[name$="middleTimeHidden"]').length;
            var indexFormiddleTimeHidden = 0;
            do {
                var middleTimeHiddenThatBelongsThere = $('input[name$="middleTimeHidden"]').eq(indexFormiddleTimeHidden);
                indexFormiddleTimeHidden++;
                middleTimeHiddenThatBelongsThere.attr("id", "middleTimeHidden" + indexFormiddleTimeHidden);
            } while (indexFormiddleTimeHidden < noOfmiddleTimeHidden);
            //Events ends




            //If start time is not empty, the first green circle will have the start time value
            if (document.getElementById("startTimeInput").value != '') {
                var firstCircle = $('.date').eq(0);
                firstCircle.html(document.getElementById("startTimeInput").value);
                document.getElementById("middleTimeHidden1").value = document.getElementById("startTimeInput").value;
            }

            //Count number of green circle
            var circleForTimeCount = $('.date').length;

            for (t = 1; t <= circleForTimeCount; t++) {

                var circleTime = document.getElementById("middleTimeHidden" + t).value;

                var previousStartTime = circleTime;
                var previousgoDuration = document.getElementById("addDurationInput" + t).value;
                var previousgoMinutes = document.getElementById("addMinutesInput" + t).value;

                //There must be start time, duration and minutes input
                //Calculate the time
                if (previousStartTime != '' && previousgoDuration != '' && previousgoMinutes != '') {
                    var strTime = previousStartTime.split(":");
                    var theHour = parseInt(strTime[0]);
                    var theMin = parseInt(strTime[1]);

                    //The previous start time's minute add the minutes user input
                    theMin += parseInt(previousgoMinutes);
                    var NumberOfHoursIntheMinutes = Math.floor((theMin / 60));
                    theMin -= (NumberOfHoursIntheMinutes * 60);

                    //Add the number of hours the minute exceeds 60 minute
                    theHour += NumberOfHoursIntheMinutes + parseInt(previousgoDuration);

                    if (theHour >= 24) {
                        theHour -= 24;
                    }

                    if (theHour < 10) {
                        theHour = "0" + theHour;
                    }

                    if (theMin < 10) {
                        theMin = "0" + theMin;
                    }

                    //Display end time
                    var theendTime = $('.endTime').eq(0);
                    theendTime.val(theHour + ":" + theMin);

                    //The next green circle has the increased time
                    if (document.getElementById("middleTimeHidden" + (t + 1)) != undefined) {
                        var theCircleTime = $('.date').eq(t);
                        theCircleTime.html(theHour + ":" + theMin);
                        document.getElementById("middleTimeHidden" + (t + 1)).value = theHour + ":" + theMin;
                    }
                }
            }
        }




        // Add new note
        var myVar
        var counterForNotes = $('.parent').length + 1;
        var ClickedOnMoveButtonForFirstTime = 0;

        $('#addNewNoteBtn').on('click', function () {
            document.getElementById("overlayForNotes").style.display = "block";
            myVar = setTimeout(makeOverlayGone, 1000);
            tinymce.remove();
            // <h4 id='headerForNotes" + counterForNotes + "' contenteditable='true' data-placeholder='Title...' class='headersNotes'></h4>
            $("#flexContainerId").append("<div class='parent' id='divForNC" + counterForNotes + "' style='background-color: #c0c0c0'><input name='headerForNotesName' placeholder='Title...' id='headerForNotes" + counterForNotes + "' class='headersNotes' style='background-color: white'><input title='Use this button to change the color of the note' type='color' value='#c0c0c0' id='color" + counterForNotes + "' name='colorPickerForNote'><button title='Use this button to delete this note' type='button' name='goRemoveNotes' id='removeBtn" + counterForNotes + "' class='btn btn-danger' >Delete</button><button type='button' class='btn btn-info' name='moveUpBtn' id='moveUpBtn" + counterForNotes + "'><i class='fa fa-arrow-up' aria-hidden='true'></i></button>&nbsp;<button type='button' class='btn btn-info' name='moveDownBtn' id='moveDownBtn" + counterForNotes + "'><i class='fa fa-arrow-down' aria-hidden='true'></i></button><textarea class='notesTextArea' id='textArea" + counterForNotes + "' name='goTextArea'></textarea><label style='font-size: large;'>Last Modified by:</label><input readonly id='lastModifiedBy" + counterForNotes + "' class='labelForLastModifiedBy' name='labelForLastModifiedBy' oninput='trim()'></div>");
            counterForNotes++;
            var newscript = document.createElement('script');
            var insidescript = document.createTextNode("tinymce.init({selector: 'textarea:not(.commentsInput)', init_instance_callback: function(editor) {editor.on('keyup', function(e) {console.log(editor.id + ' was edited' ); var theEditorId = editor.id; if(theEditorId.includes('Set')) {var justTheNumberFromSet = theEditorId.substring(11, theEditorId.length); var lastModifiedByLabel = 'lastModifiedBySet' + justTheNumberFromSet; document.getElementById(lastModifiedByLabel).value = document.getElementById('userNameHere').innerText;} else {var justTheNumber = theEditorId.substring(8, theEditorId.length); var noteLastModifiedLabel = 'lastModifiedBy' + justTheNumber; document.getElementById(noteLastModifiedLabel).value = document.getElementById('userNameHere').innerText;} });}, content_css: '//www.tiny.cloud/css/codepen.min.css', plugins: 'print preview searchreplace autolink autosave save directionality visualblocks visualchars fullscreen image link media template codesample table charmap hr pagebreak nonbreaking anchor toc insertdatetime advlist lists wordcount imagetools textpattern noneditable help charmap emoticons', toolbar: 'undo redo | bold italic underline strikethrough | fontselect fontsizeselect formatselect | alignleft aligncenter alignright alignjustify | outdent indent |  numlist bullist | forecolor backcolor removeformat | pagebreak | charmap emoticons | fullscreen  preview save print | insertfile image media template link anchor codesample | a11ycheck ltr rtl | showcomments addcomment', image_title: true, automatic_uploads: true, file_picker_types: 'image', file_picker_callback: function (cb, value, meta) {var input = document.createElement('input'); input.setAttribute('type', 'file'); input.setAttribute('accept', 'image/*'); input.onchange = function () { var file = this.files[0]; var reader = new FileReader(); reader.onload = function () { var id = 'blobid' + (new Date()).getTime(); var base64 = reader.result.split(',')[1]; var blobInfo = blobCache.create(id, file, base64); blobCache.add(blobInfo); cb(blobInfo.blobUri(), { title: file.name }); }; reader.readAsDataURL(file); }; input.click();}});");
            newscript.appendChild(insidescript);
            $("textarea").append(newscript);
            ClickedOnMoveButtonForFirstTime = 0;
        });

        $('#flexContainerId').on('change', 'input[name$="colorPickerForNote"]', function () {
            var specificIdOfColorPicker = event.target.id;
            console.log(specificIdOfColorPicker);
            var noFromSpecificIdOfColorPicker = specificIdOfColorPicker.substring(5, specificIdOfColorPicker.length);
            console.log(noFromSpecificIdOfColorPicker);
            var textForDiv = "divForNC" + noFromSpecificIdOfColorPicker;
            document.getElementById(textForDiv).style.backgroundColor = event.target.value;
        });


        //Move note up
        $('#flexContainerId').on('click', 'button[name$="moveUpBtn"]', function () {
            tinymce.triggerSave();
            if (ClickedOnMoveButtonForFirstTime == 0) {
                document.getElementById("overlayForNotes").style.display = "block";
                myVar = setTimeout(makeOverlayGone, 1000);
                ClickedOnMoveButtonForFirstTime++;
                tinymce.remove();
                var newscript = document.createElement('script');
                var insidescript = document.createTextNode("tinymce.init({selector: 'textarea:not(.commentsInput)', init_instance_callback: function(editor) {editor.on('keyup', function(e) {console.log(editor.id + ' was edited' ); var theEditorId = editor.id; if(theEditorId.includes('Set')) {var justTheNumberFromSet = theEditorId.substring(11, theEditorId.length); var lastModifiedByLabel = 'lastModifiedBySet' + justTheNumberFromSet; document.getElementById(lastModifiedByLabel).value = document.getElementById('userNameHere').innerText;} else {var justTheNumber = theEditorId.substring(8, theEditorId.length); var noteLastModifiedLabel = 'lastModifiedBy' + justTheNumber; document.getElementById(noteLastModifiedLabel).value = document.getElementById('userNameHere').innerText;} });}, content_css: '//www.tiny.cloud/css/codepen.min.css', plugins: 'print preview searchreplace autolink autosave save directionality visualblocks visualchars fullscreen image link media template codesample table charmap hr pagebreak nonbreaking anchor toc insertdatetime advlist lists wordcount imagetools textpattern noneditable help charmap emoticons', toolbar: 'undo redo | bold italic underline strikethrough | fontselect fontsizeselect formatselect | alignleft aligncenter alignright alignjustify | outdent indent |  numlist bullist | forecolor backcolor removeformat | pagebreak | charmap emoticons | fullscreen  preview save print | insertfile image media template link anchor codesample | a11ycheck ltr rtl | showcomments addcomment', image_title: true, automatic_uploads: true, file_picker_types: 'image', file_picker_callback: function (cb, value, meta) {var input = document.createElement('input'); input.setAttribute('type', 'file'); input.setAttribute('accept', 'image/*'); input.onchange = function () { var file = this.files[0]; var reader = new FileReader(); reader.onload = function () { var id = 'blobid' + (new Date()).getTime(); var base64 = reader.result.split(',')[1]; var blobInfo = blobCache.create(id, file, base64); blobCache.add(blobInfo); cb(blobInfo.blobUri(), { title: file.name }); }; reader.readAsDataURL(file); }; input.click();}});");
                newscript.appendChild(insidescript);
                $("textarea").append(newscript);
            }

            var idOfClickedmoveUpBtn = this.id;
            var noFromIdOfClickedmoveUpBtn = parseInt(idOfClickedmoveUpBtn.substring(9, idOfClickedmoveUpBtn.length));

            if (noFromIdOfClickedmoveUpBtn != 1) {
                var theCurrentHeaderForNotes = document.getElementById("headerForNotes" + noFromIdOfClickedmoveUpBtn).value;
                var theAboveHeaderForNotes = document.getElementById("headerForNotes" + (noFromIdOfClickedmoveUpBtn - 1)).value;
                document.getElementById("headerForNotes" + noFromIdOfClickedmoveUpBtn).value = theAboveHeaderForNotes;
                document.getElementById("headerForNotes" + (noFromIdOfClickedmoveUpBtn - 1)).value = theCurrentHeaderForNotes;

                var theCurrentColor = document.getElementById("color" + noFromIdOfClickedmoveUpBtn).value;
                var theAboveColor = document.getElementById("color" + (noFromIdOfClickedmoveUpBtn - 1)).value;
                document.getElementById("color" + noFromIdOfClickedmoveUpBtn).value = theAboveColor;
                document.getElementById("color" + (noFromIdOfClickedmoveUpBtn - 1)).value = theCurrentColor;

                var theCurrentDivForNC = document.getElementById("divForNC" + noFromIdOfClickedmoveUpBtn).style.backgroundColor;
                var theAboveDivForNC = document.getElementById("divForNC" + (noFromIdOfClickedmoveUpBtn - 1)).style.backgroundColor;
                document.getElementById("divForNC" + noFromIdOfClickedmoveUpBtn).style.backgroundColor = theAboveDivForNC;
                document.getElementById("divForNC" + (noFromIdOfClickedmoveUpBtn - 1)).style.backgroundColor = theCurrentDivForNC;

                var theCurrenttextArea = document.getElementById("textArea" + noFromIdOfClickedmoveUpBtn).value;
                var theAbovetextArea = document.getElementById("textArea" + (noFromIdOfClickedmoveUpBtn - 1)).value;
                tinymce.get("textArea" + noFromIdOfClickedmoveUpBtn).setContent(theAbovetextArea);
                tinymce.get("textArea" + (noFromIdOfClickedmoveUpBtn - 1)).setContent(theCurrenttextArea);
                document.getElementById("textArea" + noFromIdOfClickedmoveUpBtn).value = theAbovetextArea;
                document.getElementById("textArea" + (noFromIdOfClickedmoveUpBtn - 1)).value = theCurrenttextArea;

                var theCurrentlastModifiedBy = document.getElementById("lastModifiedBy" + noFromIdOfClickedmoveUpBtn).value;
                var theAbovelastModifiedBy = document.getElementById("lastModifiedBy" + (noFromIdOfClickedmoveUpBtn - 1)).value;
                document.getElementById("lastModifiedBy" + noFromIdOfClickedmoveUpBtn).value = theAbovelastModifiedBy;
                document.getElementById("lastModifiedBy" + (noFromIdOfClickedmoveUpBtn - 1)).value = theCurrentlastModifiedBy;
            }
        });


        //Move note down
        $('#flexContainerId').on('click', 'button[name$="moveDownBtn"]', function () {
            tinymce.triggerSave();
            if (ClickedOnMoveButtonForFirstTime == 0) {
                document.getElementById("overlayForNotes").style.display = "block";
                myVar = setTimeout(makeOverlayGone, 1000);
                ClickedOnMoveButtonForFirstTime++;
                tinymce.remove();
                var newscript = document.createElement('script');
                var insidescript = document.createTextNode("tinymce.init({selector: 'textarea:not(.commentsInput)', init_instance_callback: function(editor) {editor.on('keyup', function(e) {console.log(editor.id + ' was edited' ); var theEditorId = editor.id; if(theEditorId.includes('Set')) {var justTheNumberFromSet = theEditorId.substring(11, theEditorId.length); var lastModifiedByLabel = 'lastModifiedBySet' + justTheNumberFromSet; document.getElementById(lastModifiedByLabel).value = document.getElementById('userNameHere').innerText;} else {var justTheNumber = theEditorId.substring(8, theEditorId.length); var noteLastModifiedLabel = 'lastModifiedBy' + justTheNumber; document.getElementById(noteLastModifiedLabel).value = document.getElementById('userNameHere').innerText;} });}, content_css: '//www.tiny.cloud/css/codepen.min.css', plugins: 'print preview searchreplace autolink autosave save directionality visualblocks visualchars fullscreen image link media template codesample table charmap hr pagebreak nonbreaking anchor toc insertdatetime advlist lists wordcount imagetools textpattern noneditable help charmap emoticons', toolbar: 'undo redo | bold italic underline strikethrough | fontselect fontsizeselect formatselect | alignleft aligncenter alignright alignjustify | outdent indent |  numlist bullist | forecolor backcolor removeformat | pagebreak | charmap emoticons | fullscreen  preview save print | insertfile image media template link anchor codesample | a11ycheck ltr rtl | showcomments addcomment', image_title: true, automatic_uploads: true, file_picker_types: 'image', file_picker_callback: function (cb, value, meta) {var input = document.createElement('input'); input.setAttribute('type', 'file'); input.setAttribute('accept', 'image/*'); input.onchange = function () { var file = this.files[0]; var reader = new FileReader(); reader.onload = function () { var id = 'blobid' + (new Date()).getTime(); var base64 = reader.result.split(',')[1]; var blobInfo = blobCache.create(id, file, base64); blobCache.add(blobInfo); cb(blobInfo.blobUri(), { title: file.name }); }; reader.readAsDataURL(file); }; input.click();}});");
                newscript.appendChild(insidescript);
                $("textarea").append(newscript);
            }

            var idOfClickedmoveDownBtn = this.id;
            var noFromIdOfClickedmoveDownBtn = parseInt(idOfClickedmoveDownBtn.substring(11, idOfClickedmoveDownBtn.length));

            var theCurrentHeaderForNotes = document.getElementById("headerForNotes" + (noFromIdOfClickedmoveDownBtn)).value;
            var theBelowHeaderForNotes = document.getElementById("headerForNotes" + (noFromIdOfClickedmoveDownBtn + 1)).value
            document.getElementById("headerForNotes" + noFromIdOfClickedmoveDownBtn).value = theBelowHeaderForNotes;
            document.getElementById("headerForNotes" + (noFromIdOfClickedmoveDownBtn + 1)).value = theCurrentHeaderForNotes;

            var theCurrentColor = document.getElementById("color" + noFromIdOfClickedmoveDownBtn).value;
            var theBelowColor = document.getElementById("color" + (noFromIdOfClickedmoveDownBtn + 1)).value;
            document.getElementById("color" + noFromIdOfClickedmoveDownBtn).value = theBelowColor;
            document.getElementById("color" + (noFromIdOfClickedmoveDownBtn + 1)).value = theCurrentColor;

            var theCurrentDivForNC = document.getElementById("divForNC" + noFromIdOfClickedmoveDownBtn).style.backgroundColor;
            var theBelowDivForNC = document.getElementById("divForNC" + (noFromIdOfClickedmoveDownBtn + 1)).style.backgroundColor;
            document.getElementById("divForNC" + noFromIdOfClickedmoveDownBtn).style.backgroundColor = theBelowDivForNC;
            document.getElementById("divForNC" + (noFromIdOfClickedmoveDownBtn + 1)).style.backgroundColor = theCurrentDivForNC;

            var theCurrenttextArea = document.getElementById("textArea" + noFromIdOfClickedmoveDownBtn).value;
            var theBelowtextArea = document.getElementById("textArea" + (noFromIdOfClickedmoveDownBtn + 1)).value;
            tinymce.get("textArea" + noFromIdOfClickedmoveDownBtn).setContent(theBelowtextArea);
            tinymce.get("textArea" + (noFromIdOfClickedmoveDownBtn + 1)).setContent(theCurrenttextArea);
            document.getElementById("textArea" + noFromIdOfClickedmoveDownBtn).value = theBelowtextArea;
            document.getElementById("textArea" + (noFromIdOfClickedmoveDownBtn + 1)).value = theCurrenttextArea;

            var theCurrentlastModifiedBy = document.getElementById("lastModifiedBy" + noFromIdOfClickedmoveDownBtn).value;
            var theBelowlastModifiedBy = document.getElementById("lastModifiedBy" + (noFromIdOfClickedmoveDownBtn + 1)).value;
            document.getElementById("lastModifiedBy" + noFromIdOfClickedmoveDownBtn).value = theBelowlastModifiedBy;
            document.getElementById("lastModifiedBy" + (noFromIdOfClickedmoveDownBtn + 1)).value = theCurrentlastModifiedBy;

        });


        //Add events
        var noOfTextAreaEvent = $('textarea[name$="textAreasForEvents"]').length;
        var secondMyVar;
        var counter = 2;
        var counterColorForEvent = noOfTextAreaEvent + 1;
        var secondCounterColorForEvent = noOfTextAreaEvent + 2;
        $('#containerBox').on('click', 'input[name$="goButton"]', function () {
            var circleForTimeCount = $('.date').length;

            var previousStartTime = document.getElementById("startTimeInput").value;
            var previousgoDuration = document.getElementById("addDurationInput" + circleForTimeCount).value;
            var previousgoMinutes = document.getElementById("addMinutesInput" + circleForTimeCount).value;
            if (previousStartTime != '' && previousgoDuration != '' && previousgoMinutes != '') {
                ClickedOnMoveButtonForFirstTime = 0;

                document.getElementById("overlay").style.display = "block";
                secondMyVar = setTimeout(off, 1000);
                tinymce.remove();

                var specificId = event.target.id;
                var noFromSpecificId = specificId.substring(11, specificId.length);
                var text = $('#spanForAN' + noFromSpecificId).html();
                noFromSpecificId++;
                //If want to give index 1 2 3 for the events

                //If want to put date there
                // <h4 class='headerForEvent' contenteditable='true' id='uniqueheaderForEvent" + counterColorForEvent + "' data-placeholder='Title...'></h4>
                // <h4 contenteditable='true' id='uniqueheaderForEvent" + secondCounterColorForEvent + "' class='headerForEvent' data-placeholder='Title...'></h4>

                var idOfTheEventToDelete = this.id;
                var noFromIdOfTheEventToDelete = idOfTheEventToDelete.substring(11, idOfTheEventToDelete.length);
                var whereToInsertAfter = document.getElementById("eventSet" + noFromIdOfTheEventToDelete);
                $("<div class='timeline-article' id='eventSet" + counter + "'><div class='content-left-container'><div class='content-left' style='background-color: #8080ff' id='divForCPE" + counterColorForEvent + "'><input name='headerForEventName' placeholder='Title...' id='uniqueheaderForEvent" + counterColorForEvent + "' class='headerForEvent' style='background-color: white'><textarea id='textAreaSet" + counterColorForEvent + "' name='textAreasForEvents' style='height: 400px' class='taclass' contenteditable='true'></textarea><input title='Use this button to change the color of the note' type='color' value='#8080ff' name='colorPickerForEvent' id='colorForEvent" + counterColorForEvent + "' /><label style='font-size: small;'>Last Modified By:</label><input readonly class='labelSetForLastModified' name='labelSetForLastModified' id='lastModifiedBySet" + counterColorForEvent + "' oninput='trim()'></div><label>Duration:</label><br /><input type='number' min='0' max='23' value='0' name='goDuration' style='width: 50px' id='addDurationInput" + counter + "' />&nbsp<label>hour(s)</label>&nbsp<input type='number' min='0' max='59' value='0' name='goMinutes' style='width: 50px' id='addMinutesInput" + counter + "' />&nbsp<label>minute(s)</label></button>&nbsp<button title='Use this button to delete this event' type='button' name='goRemoveEvents' id='removeEventBtn" + counter + "' class='btn clever-btn btn-2'><i class='fa fa-trash' style='font-size: 18px'></i></button><br /><label hidden>Start Time:</label><br /><input name='goTime' type='time' id='inputForStartTime" + counter + "' hidden /></div><div class='content-right-container'><div class='content-right' style='background-color: #80ff00' id='divForCPE" + secondCounterColorForEvent + "'><input name='headerForEventName' placeholder='Title...' id='uniqueheaderForEvent" + secondCounterColorForEvent + "' class='headerForEvent' style='background-color: white'><textarea id='textAreaSet" + secondCounterColorForEvent + "' name='textAreasForEvents' style='height: 400px' class='taclass' contenteditable='true'></textarea><input title='Use this button to change the color of the note' type='color' value='#80ff00' name='colorPickerForEvent' id='colorForEvent" + secondCounterColorForEvent + "'/><label style='font-size: small;'>Last Modified by:</label><input readonly id='lastModifiedBySet" + secondCounterColorForEvent + "' class='labelSetForLastModified' name='labelSetForLastModified'></div></div><div class='meta-date'><span class='date' id='circleForEvent" + counter + "'></span><input name='middleTimeHidden' id='middleTimeHidden" + counter + "' value='00:00' hidden/></div><button type='button' id='moveUpBtnTL" + counter + "' class='btn btn-info' name='moveUpBtnTL' style='display: block; margin-left: auto; margin-right: auto; margin-bottom: 10px; margin-top: 150px;'><i class='fa fa-arrow-up' aria-hidden='true'></i></button><button type='button' id='moveDownBtnTL" + counter + "' class='btn btn-info' name='moveDownBtnTL' style='display: block; margin-left: auto; margin-right: auto; margin-bottom: 10px;'><i class='fa fa-arrow-down' aria-hidden='true'></i></button><input type='button' value='+' class='btn clever-btn btn-2' name='goButton' title='Use this button to add an event' style='display: block; margin: auto; max-width: 300px; margin-top: 110px; background: #00b0bd; color: rgba(0, 0, 0, 0.50); font-size:xx-large' id='addEventBtn" + counter + "' /></div>").insertAfter(whereToInsertAfter);

                checkeverytime();
                var newscript = document.createElement('script');
                var insidescript = document.createTextNode("tinymce.init({selector: 'textarea:not(.commentsInput)', init_instance_callback: function(editor) {editor.on('keyup', function(e) {console.log(editor.id + ' was edited' ); var theEditorId = editor.id; if(theEditorId.includes('Set')) {var justTheNumberFromSet = theEditorId.substring(11, theEditorId.length); var lastModifiedByLabel = 'lastModifiedBySet' + justTheNumberFromSet; document.getElementById(lastModifiedByLabel).value = document.getElementById('userNameHere').innerText;} else {var justTheNumber = theEditorId.substring(8, theEditorId.length); var noteLastModifiedLabel = 'lastModifiedBy' + justTheNumber; document.getElementById(noteLastModifiedLabel).value = document.getElementById('userNameHere').innerText;} });}, content_css: '//www.tiny.cloud/css/codepen.min.css', plugins: 'print preview searchreplace autolink autosave save directionality visualblocks visualchars fullscreen image link media template codesample table charmap hr pagebreak nonbreaking anchor toc insertdatetime advlist lists wordcount imagetools textpattern noneditable help charmap emoticons', toolbar: 'undo redo | bold italic underline strikethrough | fontselect fontsizeselect formatselect | alignleft aligncenter alignright alignjustify | outdent indent |  numlist bullist | forecolor backcolor removeformat | pagebreak | charmap emoticons | fullscreen  preview save print | insertfile image media template link anchor codesample | a11ycheck ltr rtl | showcomments addcomment', image_title: true, automatic_uploads: true, file_picker_types: 'image', file_picker_callback: function (cb, value, meta) {var input = document.createElement('input'); input.setAttribute('type', 'file'); input.setAttribute('accept', 'image/*'); input.onchange = function () { var file = this.files[0]; var reader = new FileReader(); reader.onload = function () { var id = 'blobid' + (new Date()).getTime(); var base64 = reader.result.split(',')[1]; var blobInfo = blobCache.create(id, file, base64); blobCache.add(blobInfo); cb(blobInfo.blobUri(), { title: file.name }); }; reader.readAsDataURL(file); }; input.click();}});");
                newscript.appendChild(insidescript);
                $("textarea").append(newscript);

                //check how many divs are created, then take the digit from the id of the button that was clicked (E.g. 1 from addEventBtn1), pass it to the span's id (E.g. spanForAN1), take out text of that span,

                //test if spanForAN4's index is 2 (if created after 1), if yes then switch spanForAN4's text from
                counter++;
                counterColorForEvent += 2;
                secondCounterColorForEvent += 2;

            }
            else {
                alert("Please fill in Duration and Start Time")
            }
        });

        function makeOverlayGone() {
            document.getElementById("overlayForNotes").style.display = "none";
        }


        function off() {
            document.getElementById("overlay").style.display = "none";
        }

        //Change note color
        $('#containerBox').on('change', 'input[name$="colorPickerForEvent"]', function () {
            var specificIdOfCPE = event.target.id;
            console.log(specificIdOfCPE);
            var noFromSpecificIdOfCPE = specificIdOfCPE.substring(13, specificIdOfCPE.length);
            console.log(noFromSpecificIdOfCPE);
            //alert(noFromSpecificIdOfCPE);
            var colorForDiv = "divForCPE" + noFromSpecificIdOfCPE;
            document.getElementById(colorForDiv).style.backgroundColor = event.target.value;
            // var inputHeaderEventToChange = "uniqueheaderForEvent" + noFromSpecificIdOfCPE;
            // document.getElementById(inputHeaderEventToChange).style.backgroundColor = event.target.value;
        });


        //Move event up
        $('#containerBox').on('click', 'button[name$="moveUpBtnTL"]', function () {
            tinymce.triggerSave();
            if (ClickedOnMoveButtonForFirstTime == 0) {
                //This is for the tinymce to display words when button up is clicked
                document.getElementById("overlayForNotes").style.display = "block";
                myVar = setTimeout(makeOverlayGone, 1000);
                ClickedOnMoveButtonForFirstTime++;
                tinymce.remove();
                var newscript = document.createElement('script');
                var insidescript = document.createTextNode("tinymce.init({selector: 'textarea:not(.commentsInput)', init_instance_callback: function(editor) {editor.on('keyup', function(e) {console.log(editor.id + ' was edited' ); var theEditorId = editor.id; if(theEditorId.includes('Set')) {var justTheNumberFromSet = theEditorId.substring(11, theEditorId.length); var lastModifiedByLabel = 'lastModifiedBySet' + justTheNumberFromSet; document.getElementById(lastModifiedByLabel).value = document.getElementById('userNameHere').innerText;} else {var justTheNumber = theEditorId.substring(8, theEditorId.length); var noteLastModifiedLabel = 'lastModifiedBy' + justTheNumber; document.getElementById(noteLastModifiedLabel).value = document.getElementById('userNameHere').innerText;} });}, content_css: '//www.tiny.cloud/css/codepen.min.css', plugins: 'print preview searchreplace autolink autosave save directionality visualblocks visualchars fullscreen image link media template codesample table charmap hr pagebreak nonbreaking anchor toc insertdatetime advlist lists wordcount imagetools textpattern noneditable help charmap emoticons', toolbar: 'undo redo | bold italic underline strikethrough | fontselect fontsizeselect formatselect | alignleft aligncenter alignright alignjustify | outdent indent |  numlist bullist | forecolor backcolor removeformat | pagebreak | charmap emoticons | fullscreen  preview save print | insertfile image media template link anchor codesample | a11ycheck ltr rtl | showcomments addcomment', image_title: true, automatic_uploads: true, file_picker_types: 'image', file_picker_callback: function (cb, value, meta) {var input = document.createElement('input'); input.setAttribute('type', 'file'); input.setAttribute('accept', 'image/*'); input.onchange = function () { var file = this.files[0]; var reader = new FileReader(); reader.onload = function () { var id = 'blobid' + (new Date()).getTime(); var base64 = reader.result.split(',')[1]; var blobInfo = blobCache.create(id, file, base64); blobCache.add(blobInfo); cb(blobInfo.blobUri(), { title: file.name }); }; reader.readAsDataURL(file); }; input.click();}});");
                newscript.appendChild(insidescript);
                $("textarea").append(newscript);

            }
            var idOfClickedmoveUpBtnTL = this.id;
            var noFromIdOfClickedmoveUpBtnTL = parseInt(idOfClickedmoveUpBtnTL.substring(11, idOfClickedmoveUpBtnTL.length));

            if (noFromIdOfClickedmoveUpBtnTL != 2) {

                var theAboveHeaderForNotesLeft = document.getElementById("uniqueheaderForEvent" + (noFromIdOfClickedmoveUpBtnTL - 3)).value;
                var theAboveHeaderForNotesRight = document.getElementById("uniqueheaderForEvent" + (noFromIdOfClickedmoveUpBtnTL - 2)).value;
                var theCurrentHeaderForNotesLeft = document.getElementById("uniqueheaderForEvent" + (noFromIdOfClickedmoveUpBtnTL - 1)).value;
                var theCurrentHeaderForNotesRight = document.getElementById("uniqueheaderForEvent" + noFromIdOfClickedmoveUpBtnTL).value;
                document.getElementById("uniqueheaderForEvent" + (noFromIdOfClickedmoveUpBtnTL - 3)).value = theCurrentHeaderForNotesLeft;
                document.getElementById("uniqueheaderForEvent" + (noFromIdOfClickedmoveUpBtnTL - 1)).value = theAboveHeaderForNotesLeft;
                document.getElementById("uniqueheaderForEvent" + (noFromIdOfClickedmoveUpBtnTL - 2)).value = theCurrentHeaderForNotesRight;
                document.getElementById("uniqueheaderForEvent" + noFromIdOfClickedmoveUpBtnTL).value = theAboveHeaderForNotesRight;

                var theAbovetextAreaSetLeft = document.getElementById("textAreaSet" + (noFromIdOfClickedmoveUpBtnTL - 3)).value;
                var theAbovetextAreaSetRight = document.getElementById("textAreaSet" + (noFromIdOfClickedmoveUpBtnTL - 2)).value;
                var theCurrenttextAreaSetLeft = document.getElementById("textAreaSet" + (noFromIdOfClickedmoveUpBtnTL - 1)).value;
                var theCurrenttextAreaSetRight = document.getElementById("textAreaSet" + noFromIdOfClickedmoveUpBtnTL).value;
                document.getElementById("textAreaSet" + (noFromIdOfClickedmoveUpBtnTL - 3)).value = theCurrenttextAreaSetLeft;
                document.getElementById("textAreaSet" + (noFromIdOfClickedmoveUpBtnTL - 1)).value = theAbovetextAreaSetLeft;
                document.getElementById("textAreaSet" + (noFromIdOfClickedmoveUpBtnTL - 2)).value = theCurrenttextAreaSetRight;
                document.getElementById("textAreaSet" + noFromIdOfClickedmoveUpBtnTL).value = theAbovetextAreaSetRight;
                tinymce.get("textAreaSet" + (noFromIdOfClickedmoveUpBtnTL - 3)).setContent(theCurrenttextAreaSetLeft);
                tinymce.get("textAreaSet" + (noFromIdOfClickedmoveUpBtnTL - 1)).setContent(theAbovetextAreaSetLeft);
                tinymce.get("textAreaSet" + (noFromIdOfClickedmoveUpBtnTL - 2)).setContent(theCurrenttextAreaSetRight);
                tinymce.get("textAreaSet" + noFromIdOfClickedmoveUpBtnTL).setContent(theAbovetextAreaSetRight);

                var theAbovelastModifiedBySetLeft = document.getElementById("lastModifiedBySet" + (noFromIdOfClickedmoveUpBtnTL - 3)).value;
                var theAbovelastModifiedBySetRight = document.getElementById("lastModifiedBySet" + (noFromIdOfClickedmoveUpBtnTL - 2)).value;
                var theCurrentlastModifiedBySetLeft = document.getElementById("lastModifiedBySet" + (noFromIdOfClickedmoveUpBtnTL - 1)).value;
                var theCurrentlastModifiedBySetRight = document.getElementById("lastModifiedBySet" + noFromIdOfClickedmoveUpBtnTL).value;
                document.getElementById("lastModifiedBySet" + (noFromIdOfClickedmoveUpBtnTL - 3)).value = theCurrentlastModifiedBySetLeft;
                document.getElementById("lastModifiedBySet" + (noFromIdOfClickedmoveUpBtnTL - 1)).value = theAbovelastModifiedBySetLeft;
                document.getElementById("lastModifiedBySet" + (noFromIdOfClickedmoveUpBtnTL - 2)).value = theCurrentlastModifiedBySetRight;
                document.getElementById("lastModifiedBySet" + noFromIdOfClickedmoveUpBtnTL).value = theAbovelastModifiedBySetRight;

                var theAbovecolorForEventLeft = document.getElementById("colorForEvent" + (noFromIdOfClickedmoveUpBtnTL - 3)).value;
                var theAbovecolorForEventRight = document.getElementById("colorForEvent" + (noFromIdOfClickedmoveUpBtnTL - 2)).value;
                var theCurrentcolorForEventLeft = document.getElementById("colorForEvent" + (noFromIdOfClickedmoveUpBtnTL - 1)).value;
                var theCurrentcolorForEventRight = document.getElementById("colorForEvent" + noFromIdOfClickedmoveUpBtnTL).value;
                document.getElementById("colorForEvent" + (noFromIdOfClickedmoveUpBtnTL - 3)).value = theCurrentcolorForEventLeft;
                document.getElementById("colorForEvent" + (noFromIdOfClickedmoveUpBtnTL - 1)).value = theAbovecolorForEventLeft;
                document.getElementById("colorForEvent" + (noFromIdOfClickedmoveUpBtnTL - 2)).value = theCurrentcolorForEventRight;
                document.getElementById("colorForEvent" + noFromIdOfClickedmoveUpBtnTL).value = theAbovecolorForEventRight;

                var theAbovedivForCPELeft = document.getElementById("divForCPE" + (noFromIdOfClickedmoveUpBtnTL - 3)).style.backgroundColor;
                var theAbovedivForCPERight = document.getElementById("divForCPE" + (noFromIdOfClickedmoveUpBtnTL - 2)).style.backgroundColor;
                var theCurrentdivForCPELeft = document.getElementById("divForCPE" + (noFromIdOfClickedmoveUpBtnTL - 1)).style.backgroundColor;
                var theCurrentdivForCPERight = document.getElementById("divForCPE" + noFromIdOfClickedmoveUpBtnTL).style.backgroundColor;
                document.getElementById("divForCPE" + (noFromIdOfClickedmoveUpBtnTL - 3)).style.backgroundColor = theCurrentdivForCPELeft;
                document.getElementById("divForCPE" + (noFromIdOfClickedmoveUpBtnTL - 2)).style.backgroundColor = theCurrentdivForCPERight
                document.getElementById("divForCPE" + (noFromIdOfClickedmoveUpBtnTL - 1)).style.backgroundColor = theAbovedivForCPELeft;
                document.getElementById("divForCPE" + noFromIdOfClickedmoveUpBtnTL).style.backgroundColor = theAbovedivForCPERight;

                var DurationInputCount = noFromIdOfClickedmoveUpBtnTL / 2;
                var theAboveaddDurationInput = document.getElementById("addDurationInput" + (DurationInputCount - 1)).value;
                var theCurrentaddDurationInput = document.getElementById("addDurationInput" + DurationInputCount).value;
                document.getElementById("addDurationInput" + (DurationInputCount - 1)).value = theCurrentaddDurationInput;
                document.getElementById("addDurationInput" + DurationInputCount).value = theAboveaddDurationInput;

                var theAboveaddMinutesInput = document.getElementById("addMinutesInput" + (DurationInputCount - 1)).value;
                var theCurrentaddMinutesInput = document.getElementById("addMinutesInput" + DurationInputCount).value;
                document.getElementById("addMinutesInput" + (DurationInputCount - 1)).value = theCurrentaddMinutesInput;
                document.getElementById("addMinutesInput" + DurationInputCount).value = theAboveaddMinutesInput;

                var theAboveinputForStartTime = document.getElementById("inputForStartTime" + (DurationInputCount - 1)).value;
                var theCurrentinputForStartTime = document.getElementById("inputForStartTime" + DurationInputCount).value;
                document.getElementById("inputForStartTime" + (DurationInputCount - 1)).value = theCurrentinputForStartTime;
                document.getElementById("inputForStartTime" + DurationInputCount).value = theAboveinputForStartTime;
            }
        });

        //Move Event down
        $('#containerBox').on('click', 'button[name$="moveDownBtnTL"]', function () {
            tinymce.triggerSave();
            if (ClickedOnMoveButtonForFirstTime == 0) {
                document.getElementById("overlayForNotes").style.display = "block";
                myVar = setTimeout(makeOverlayGone, 1000);
                ClickedOnMoveButtonForFirstTime++;
                tinymce.remove();
                var newscript = document.createElement('script');
                var insidescript = document.createTextNode("tinymce.init({selector: 'textarea:not(.commentsInput)', init_instance_callback: function(editor) {editor.on('keyup', function(e) {console.log(editor.id + ' was edited' ); var theEditorId = editor.id; if(theEditorId.includes('Set')) {var justTheNumberFromSet = theEditorId.substring(11, theEditorId.length); var lastModifiedByLabel = 'lastModifiedBySet' + justTheNumberFromSet; document.getElementById(lastModifiedByLabel).value = document.getElementById('userNameHere').innerText;} else {var justTheNumber = theEditorId.substring(8, theEditorId.length); var noteLastModifiedLabel = 'lastModifiedBy' + justTheNumber; document.getElementById(noteLastModifiedLabel).value = document.getElementById('userNameHere').innerText;} });}, content_css: '//www.tiny.cloud/css/codepen.min.css', plugins: 'print preview searchreplace autolink autosave save directionality visualblocks visualchars fullscreen image link media template codesample table charmap hr pagebreak nonbreaking anchor toc insertdatetime advlist lists wordcount imagetools textpattern noneditable help charmap emoticons', toolbar: 'undo redo | bold italic underline strikethrough | fontselect fontsizeselect formatselect | alignleft aligncenter alignright alignjustify | outdent indent |  numlist bullist | forecolor backcolor removeformat | pagebreak | charmap emoticons | fullscreen  preview save print | insertfile image media template link anchor codesample | a11ycheck ltr rtl | showcomments addcomment', image_title: true, automatic_uploads: true, file_picker_types: 'image', file_picker_callback: function (cb, value, meta) {var input = document.createElement('input'); input.setAttribute('type', 'file'); input.setAttribute('accept', 'image/*'); input.onchange = function () { var file = this.files[0]; var reader = new FileReader(); reader.onload = function () { var id = 'blobid' + (new Date()).getTime(); var base64 = reader.result.split(',')[1]; var blobInfo = blobCache.create(id, file, base64); blobCache.add(blobInfo); cb(blobInfo.blobUri(), { title: file.name }); }; reader.readAsDataURL(file); }; input.click();}});");
                newscript.appendChild(insidescript);
                $("textarea").append(newscript);
            }

            var idOfClickedmoveDownBtnTL = this.id;
            var noFromIdOfClickedmoveDownBtnTL = parseInt(idOfClickedmoveDownBtnTL.substring(13, idOfClickedmoveDownBtnTL.length));

            var theCurrentHeaderForNotesLeft = document.getElementById("uniqueheaderForEvent" + (noFromIdOfClickedmoveDownBtnTL - 1)).value;
            var theCurrentHeaderForNotesRight = document.getElementById("uniqueheaderForEvent" + noFromIdOfClickedmoveDownBtnTL).value;
            var theBelowHeaderForNotesLeft = document.getElementById("uniqueheaderForEvent" + (noFromIdOfClickedmoveDownBtnTL + 1)).value;
            var theBelowHeaderForNotesRight = document.getElementById("uniqueheaderForEvent" + (noFromIdOfClickedmoveDownBtnTL + 2)).value;
            document.getElementById("uniqueheaderForEvent" + (noFromIdOfClickedmoveDownBtnTL - 1)).value = theBelowHeaderForNotesLeft;
            document.getElementById("uniqueheaderForEvent" + noFromIdOfClickedmoveDownBtnTL).value = theBelowHeaderForNotesRight;
            document.getElementById("uniqueheaderForEvent" + (noFromIdOfClickedmoveDownBtnTL + 1)).value = theCurrentHeaderForNotesLeft;
            document.getElementById("uniqueheaderForEvent" + (noFromIdOfClickedmoveDownBtnTL + 2)).value = theCurrentHeaderForNotesRight;

            var theCurrenttextAreaSetLeft = document.getElementById("textAreaSet" + (noFromIdOfClickedmoveDownBtnTL - 1)).value;
            var theCurrenttextAreaSetRight = document.getElementById("textAreaSet" + noFromIdOfClickedmoveDownBtnTL).value;
            var theBelowtextAreaSetLeft = document.getElementById("textAreaSet" + (noFromIdOfClickedmoveDownBtnTL + 1)).value;
            var theBelowtextAreaSetRight = document.getElementById("textAreaSet" + (noFromIdOfClickedmoveDownBtnTL + 2)).value;
            document.getElementById("textAreaSet" + (noFromIdOfClickedmoveDownBtnTL - 1)).value = theBelowtextAreaSetLeft;
            document.getElementById("textAreaSet" + noFromIdOfClickedmoveDownBtnTL).value = theBelowtextAreaSetRight;
            document.getElementById("textAreaSet" + (noFromIdOfClickedmoveDownBtnTL + 1)).value = theCurrenttextAreaSetLeft;
            document.getElementById("textAreaSet" + (noFromIdOfClickedmoveDownBtnTL + 2)).value = theCurrenttextAreaSetRight;
            tinymce.get("textAreaSet" + (noFromIdOfClickedmoveDownBtnTL - 1)).setContent(theBelowtextAreaSetLeft);
            tinymce.get("textAreaSet" + noFromIdOfClickedmoveDownBtnTL).setContent(theBelowtextAreaSetRight);
            tinymce.get("textAreaSet" + (noFromIdOfClickedmoveDownBtnTL + 1)).setContent(theCurrenttextAreaSetLeft);
            tinymce.get("textAreaSet" + (noFromIdOfClickedmoveDownBtnTL + 2)).setContent(theCurrenttextAreaSetRight);

            var theCurrentlastModifiedBySetLeft = document.getElementById("lastModifiedBySet" + (noFromIdOfClickedmoveDownBtnTL - 1)).value;
            var theCurrentlastModifiedBySetRight = document.getElementById("lastModifiedBySet" + noFromIdOfClickedmoveDownBtnTL).value;
            var theBelowlastModifiedBySetLeft = document.getElementById("lastModifiedBySet" + (noFromIdOfClickedmoveDownBtnTL + 1)).value;
            var theBelowlastModifiedBySetRight = document.getElementById("lastModifiedBySet" + (noFromIdOfClickedmoveDownBtnTL + 2)).value;
            document.getElementById("lastModifiedBySet" + (noFromIdOfClickedmoveDownBtnTL - 1)).value = theBelowlastModifiedBySetLeft;
            document.getElementById("lastModifiedBySet" + noFromIdOfClickedmoveDownBtnTL).value = theBelowlastModifiedBySetRight;
            document.getElementById("lastModifiedBySet" + (noFromIdOfClickedmoveDownBtnTL + 1)).value = theCurrentlastModifiedBySetLeft;
            document.getElementById("lastModifiedBySet" + (noFromIdOfClickedmoveDownBtnTL + 2)).value = theCurrentlastModifiedBySetRight;

            var theCurrentcolorForEventLeft = document.getElementById("colorForEvent" + (noFromIdOfClickedmoveDownBtnTL - 1)).value;
            var theCurrentcolorForEventRight = document.getElementById("colorForEvent" + noFromIdOfClickedmoveDownBtnTL).value;
            var theBelowcolorForEventLeft = document.getElementById("colorForEvent" + (noFromIdOfClickedmoveDownBtnTL + 1)).value;
            var theBelowcolorForEventRight = document.getElementById("colorForEvent" + (noFromIdOfClickedmoveDownBtnTL + 2)).value;
            document.getElementById("colorForEvent" + (noFromIdOfClickedmoveDownBtnTL - 1)).value = theBelowcolorForEventLeft;
            document.getElementById("colorForEvent" + noFromIdOfClickedmoveDownBtnTL).value = theBelowcolorForEventRight;
            document.getElementById("colorForEvent" + (noFromIdOfClickedmoveDownBtnTL + 1)).value = theCurrentcolorForEventLeft;
            document.getElementById("colorForEvent" + (noFromIdOfClickedmoveDownBtnTL + 2)).value = theCurrentcolorForEventRight;

            var theCurrentdivForCPELeft = document.getElementById("divForCPE" + (noFromIdOfClickedmoveDownBtnTL - 1)).style.backgroundColor;
            var theCurrentdivForCPERight = document.getElementById("divForCPE" + noFromIdOfClickedmoveDownBtnTL).style.backgroundColor;
            var theBelowdivForCPELeft = document.getElementById("divForCPE" + (noFromIdOfClickedmoveDownBtnTL + 1)).style.backgroundColor;
            var theBelowdivForCPERight = document.getElementById("divForCPE" + (noFromIdOfClickedmoveDownBtnTL + 2)).style.backgroundColor;
            document.getElementById("divForCPE" + (noFromIdOfClickedmoveDownBtnTL - 1)).style.backgroundColor = theBelowdivForCPELeft;
            document.getElementById("divForCPE" + noFromIdOfClickedmoveDownBtnTL).style.backgroundColor = theBelowdivForCPERight;
            document.getElementById("divForCPE" + (noFromIdOfClickedmoveDownBtnTL + 1)).style.backgroundColor = theCurrentdivForCPELeft;
            document.getElementById("divForCPE" + (noFromIdOfClickedmoveDownBtnTL + 2)).style.backgroundColor = theCurrentdivForCPERight;

            var DurationInputCount = noFromIdOfClickedmoveDownBtnTL / 2;
            var theBelowaddDurationInput = document.getElementById("addDurationInput" + (DurationInputCount + 1)).value;
            var theCurrentaddDurationInput = document.getElementById("addDurationInput" + DurationInputCount).value;
            document.getElementById("addDurationInput" + (DurationInputCount + 1)).value = theCurrentaddDurationInput;
            document.getElementById("addDurationInput" + DurationInputCount).value = theBelowaddDurationInput;

            var theBelowaddMinutesInput = document.getElementById("addMinutesInput" + (DurationInputCount + 1)).value;
            var theCurrentaddMinutesInput = document.getElementById("addMinutesInput" + DurationInputCount).value;
            document.getElementById("addMinutesInput" + (DurationInputCount + 1)).value = theCurrentaddMinutesInput;
            document.getElementById("addMinutesInput" + DurationInputCount).value = theBelowaddMinutesInput;

            var theBelowinputForStartTime = document.getElementById("inputForStartTime" + (DurationInputCount + 1)).value;
            var theCurrentinputForStartTime = document.getElementById("inputForStartTime" + DurationInputCount).value;
            document.getElementById("inputForStartTime" + (DurationInputCount + 1)).value = theCurrentinputForStartTime;
            document.getElementById("inputForStartTime" + DurationInputCount).value = theBelowinputForStartTime;
        });






        //Post-lesson survey link
        var postLessonSurveyLinkCounter = $('a[name$="postLessonSurveyLink"]').length + 1;

        $('#LinkDiv').on('click', 'button[name$="addLinkBtn"]', function (event) {
            tinymce.triggerSave();
            var linkDiv = document.getElementById("LinkDiv");
            var linkTbValue = document.getElementById("postLessonSurveyLinkTb").value;
            var linkTbObj = document.getElementById("postLessonSurveyLinkTb");
            document.getElementById("postLessonSurveyLinkTb").style.borderColor = "black"
            document.getElementById("postLessonSurveyLinkTb").style.borderStyle = "solid"
            document.getElementById("alertErrorsForLink").innerHTML = '';
            var allInputed = true;

            if (linkTbObj.value == '') {
                document.getElementById("postLessonSurveyLinkTb").style.borderColor = "red"
                document.getElementById("postLessonSurveyLinkTb").style.borderStyle = "solid"
                document.getElementById("alertErrorsForLink").innerHTML += "<div class=\"alert alert-danger alert-dismissible fade show\" role=\"alert\">"
                    + "Please enter a link"
                    + "<button type=\"button\" class=\"close\" data-dismiss=\"alert\" aria-label=\"Close\">"
                    + "<span aria-hidden=\"true\">&times;</span>"
                    + "</button></div>";
                allInputed = false;

            } else {
                var str = document.getElementById("alertErrorsForLink").innerHTML.trim();
                str = str.replace("<div class=\"alert alert-danger alert-dismissible fade show\" role=\"alert\">"
                    + "Please enter a link"
                    + "<button type=\"button\" class=\"close\" data-dismiss=\"alert\" aria-label=\"Close\">"
                    + "<span aria-hidden=\"true\">&times;</span>"
                    + "</button></div>", "");
                document.getElementById("alertErrorsForLink").innerHTML = str;
                allInputed = true;

                if (!linkTbObj.checkValidity()) {
                    event.preventDefault();
                    document.getElementById("postLessonSurveyLinkTb").style.borderColor = "red"
                    document.getElementById("postLessonSurveyLinkTb").style.borderStyle = "solid"
                    document.getElementById("alertErrorsForLink").innerHTML += "<div class=\"alert alert-danger alert-dismissible fade show\" role=\"alert\">"
                        + "Invalid URL"
                        + "<button type=\"button\" class=\"close\" data-dismiss=\"alert\" aria-label=\"Close\">"
                        + "<span aria-hidden=\"true\">&times;</span>"
                        + "</button></div>";
                    allInputed = false;
                }
                else {
                    var str = document.getElementById("alertErrorsForLink").innerHTML.trim();
                    str = str.replace("<div class=\"alert alert-danger alert-dismissible fade show\" role=\"alert\">"
                        + "Invalid URL"
                        + "<button type=\"button\" class=\"close\" data-dismiss=\"alert\" aria-label=\"Close\">"
                        + "<span aria-hidden=\"true\">&times;</span>"
                        + "</button></div>", "");
                    document.getElementById("alertErrorsForLink").innerHTML = str;
                    allInputed = true;
                }
            }

            if (allInputed) {
                var table = document.getElementById("tableForLinks");
                var row = table.insertRow(-1);
                var cell1 = row.insertCell(-1);
                var cell2 = row.insertCell(-1);
                document.getElementById("postLessonSurveyLinkTb").value = '';

                cell1.innerHTML += "<a href='" + linkTbValue + "' name='postLessonSurveyLink' target='_blank' id='postLessonSurveyLink" + postLessonSurveyLinkCounter + "' value='" + linkTbValue + "'>" + linkTbValue + "</a>";
                cell1.innerHTML += "<input name='postLessonSurveyLinkTbb' type='url' id='postLessonSurveyLinkTbb" + postLessonSurveyLinkCounter + "' class='form-control col mr-2' value='" + linkTbValue + "' hidden>";
                cell2.innerHTML += "<button class='btn btn-danger mt-2' name='deleteLinkBtn' type='button' data-toggle='modal' data-target='#exampleModal' id='deleteLinkBtn" + postLessonSurveyLinkCounter + "'> Delete</button>";
            }
        });

        $('#LinkDiv').on('click', 'button[name$="deleteLinkBtn"]', function () {
            tinymce.triggerSave();
            var idOfClickeddeleteLinkBtnTL = this.id;
            var noFromIdOfClickeddeleteLinkBtnTL = parseInt(idOfClickeddeleteLinkBtnTL.substring(13, idOfClickeddeleteLinkBtnTL.length));
            document.getElementById("modal-bodyID").innerHTML = "";
            document.getElementById("modal-bodyID").innerHTML += "<p hidden id='idOfDeleteBtn'>" + idOfClickeddeleteLinkBtnTL + "</p>";
            document.getElementById("modal-bodyID").innerHTML += "<p>Are you sure to delete this link?</p>";
            $('#exampleModal').modal('show')
        });


        //Modal pop-up deletion
        $('#ModalPopUpForDeletion').on('click', 'button[name$="ConfirmDeleteBtnInModal"]', function () {
            tinymce.triggerSave();
            $('#exampleModal').modal('hide');

            var idOfClickeddeleteLinkBtnTL = document.getElementById("idOfDeleteBtn").innerHTML;
            var idOfClickeddeleteLinkBtnTLText = idOfClickeddeleteLinkBtnTL.substring(0, 13);
            var noFromIdOfClickeddeleteLinkBtnTL = parseInt(idOfClickeddeleteLinkBtnTL.substring(13, idOfClickeddeleteLinkBtnTL.length));

            var idOfClickedRemoveBtn = document.getElementById("idOfDeleteBtn").innerHTML;
            var idOfClickedRemoveBtnText = idOfClickedRemoveBtn.substring(0, 9);
            var noFromIdOfClickedRemoveBtn = parseInt(idOfClickedRemoveBtn.substring(9, idOfClickedRemoveBtn.length));

            var idOfClickedRemoveEventBtn = document.getElementById("idOfDeleteBtn").innerHTML;
            var idOfClickedRemoveEventBtnText = idOfClickedRemoveEventBtn.substring(0, 14);
            var noFromIdOfClickedRemoveEventBtn = parseInt(idOfClickedRemoveEventBtn.substring(14, idOfClickedRemoveEventBtn.length));

            if (idOfClickeddeleteLinkBtnTLText == 'deleteLinkBtn') {
                document.getElementById("tableForLinks").deleteRow(noFromIdOfClickeddeleteLinkBtnTL);
            }
            else if (idOfClickedRemoveBtnText == 'removeBtn') {
                var divToDelete = "divForNC" + noFromIdOfClickedRemoveBtn;
                var noteToRemove = document.getElementById(divToDelete);

                counterForNotes--; //This needs to be minus so that can be increment when adding new one, else it will affect the tinymce to have no textarea
                ClickedOnMoveButtonForFirstTime = 0;
                noteToRemove.remove();
                tinymce.triggerSave();
                tinymce.remove();

                //Do this for the lastmodifiedby to work when typing in textarea after deletion
                checkeverytime();
                document.getElementById("overlayForNotes").style.display = "block";
                myVar = setTimeout(makeOverlayGone, 1000);
                var newscript = document.createElement('script');
                var insidescript = document.createTextNode("tinymce.init({selector: 'textarea:not(.commentsInput)', init_instance_callback: function(editor) {editor.on('keyup', function(e) {console.log(editor.id + ' was edited' ); var theEditorId = editor.id; if(theEditorId.includes('Set')) {var justTheNumberFromSet = theEditorId.substring(11, theEditorId.length); var lastModifiedByLabel = 'lastModifiedBySet' + justTheNumberFromSet; document.getElementById(lastModifiedByLabel).value = document.getElementById('userNameHere').innerText;} else {var justTheNumber = theEditorId.substring(8, theEditorId.length); var noteLastModifiedLabel = 'lastModifiedBy' + justTheNumber; document.getElementById(noteLastModifiedLabel).value = document.getElementById('userNameHere').innerText;} });}, content_css: '//www.tiny.cloud/css/codepen.min.css', plugins: 'print preview searchreplace autolink autosave save directionality visualblocks visualchars fullscreen image link media template codesample table charmap hr pagebreak nonbreaking anchor toc insertdatetime advlist lists wordcount imagetools textpattern noneditable help charmap emoticons', toolbar: 'undo redo | bold italic underline strikethrough | fontselect fontsizeselect formatselect | alignleft aligncenter alignright alignjustify | outdent indent |  numlist bullist | forecolor backcolor removeformat | pagebreak | charmap emoticons | fullscreen  preview save print | insertfile image media template link anchor codesample | a11ycheck ltr rtl | showcomments addcomment', image_title: true, automatic_uploads: true, file_picker_types: 'image', file_picker_callback: function (cb, value, meta) {var input = document.createElement('input'); input.setAttribute('type', 'file'); input.setAttribute('accept', 'image/*'); input.onchange = function () { var file = this.files[0]; var reader = new FileReader(); reader.onload = function () { var id = 'blobid' + (new Date()).getTime(); var base64 = reader.result.split(',')[1]; var blobInfo = blobCache.create(id, file, base64); blobCache.add(blobInfo); cb(blobInfo.blobUri(), { title: file.name }); }; reader.readAsDataURL(file); }; input.click();}});");
                newscript.appendChild(insidescript);
                $("textarea").append(newscript);
            }
            else if (idOfClickedRemoveEventBtnText == 'removeEventBtn') {
                var eventSetToDelete = "eventSet" + noFromIdOfClickedRemoveEventBtn;
                var setOfEventToRemove = document.getElementById(eventSetToDelete);

                ClickedOnMoveButtonForFirstTime = 0;
                //This needs to be minus so that can be increment when adding new one, else it will affect the tinymce to have no textarea
                counter--;
                counterColorForEvent -= 2;
                secondCounterColorForEvent -= 2;
                var eventSetToDelete = "eventSet" + noFromIdOfClickedRemoveEventBtn;
                var setOfEventToRemove = document.getElementById(eventSetToDelete);
                setOfEventToRemove.remove();
                tinymce.triggerSave();
                tinymce.remove();

                //Do this for the lastmodifiedby to work when typing in textarea after deletion
                checkeverytime();
                document.getElementById("overlayForNotes").style.display = "block";
                myVar = setTimeout(makeOverlayGone, 1000);
                var newscript = document.createElement('script');
                var insidescript = document.createTextNode("tinymce.init({selector: 'textarea:not(.commentsInput)', init_instance_callback: function(editor) {editor.on('keyup', function(e) {console.log(editor.id + ' was edited' ); var theEditorId = editor.id; if(theEditorId.includes('Set')) {var justTheNumberFromSet = theEditorId.substring(11, theEditorId.length); var lastModifiedByLabel = 'lastModifiedBySet' + justTheNumberFromSet; document.getElementById(lastModifiedByLabel).value = document.getElementById('userNameHere').innerText;} else {var justTheNumber = theEditorId.substring(8, theEditorId.length); var noteLastModifiedLabel = 'lastModifiedBy' + justTheNumber; document.getElementById(noteLastModifiedLabel).value = document.getElementById('userNameHere').innerText;} });}, content_css: '//www.tiny.cloud/css/codepen.min.css', plugins: 'print preview searchreplace autolink autosave save directionality visualblocks visualchars fullscreen image link media template codesample table charmap hr pagebreak nonbreaking anchor toc insertdatetime advlist lists wordcount imagetools textpattern noneditable help charmap emoticons', toolbar: 'undo redo | bold italic underline strikethrough | fontselect fontsizeselect formatselect | alignleft aligncenter alignright alignjustify | outdent indent |  numlist bullist | forecolor backcolor removeformat | pagebreak | charmap emoticons | fullscreen  preview save print | insertfile image media template link anchor codesample | a11ycheck ltr rtl | showcomments addcomment', image_title: true, automatic_uploads: true, file_picker_types: 'image', file_picker_callback: function (cb, value, meta) {var input = document.createElement('input'); input.setAttribute('type', 'file'); input.setAttribute('accept', 'image/*'); input.onchange = function () { var file = this.files[0]; var reader = new FileReader(); reader.onload = function () { var id = 'blobid' + (new Date()).getTime(); var base64 = reader.result.split(',')[1]; var blobInfo = blobCache.create(id, file, base64); blobCache.add(blobInfo); cb(blobInfo.blobUri(), { title: file.name }); }; reader.readAsDataURL(file); }; input.click();}});");
                newscript.appendChild(insidescript);
                $("textarea").append(newscript);
            }
        });

        $('#containerBox').on('click', 'button[name$="goRemoveEvents"]', function () {
            tinymce.triggerSave();

            var idOfClickedRemoveEventBtn = this.id;
            document.getElementById("modal-bodyID").innerHTML = "";
            document.getElementById("modal-bodyID").innerHTML += "<p hidden id='idOfDeleteBtn'>" + idOfClickedRemoveEventBtn + "</p>";
            document.getElementById("modal-bodyID").innerHTML += "<p>Are you sure to delete this event?</p>";
            $('#exampleModal').modal('show')
        });


        $('#flexContainerId').on('click', 'button[name$="goRemoveNotes"]', function () {
            tinymce.triggerSave();

            var idOfClickedRemoveBtn = this.id;
            document.getElementById("modal-bodyID").innerHTML = "";
            document.getElementById("modal-bodyID").innerHTML += "<p hidden id='idOfDeleteBtn'>" + idOfClickedRemoveBtn + "</p>";
            document.getElementById("modal-bodyID").innerHTML += "<p>Are you sure to delete this note?</p>";
            $('#exampleModal').modal('show')
        });









        function displaySubmitFormOverlay() {
            document.getElementById("topicOfLessonTb").style.borderColor = "black"
            document.getElementById("topicOfLessonTb").style.borderStyle = "solid"
            document.getElementById("alertErrors").innerHTML = '';
            var topicOfLessonTbInputed = true;

            if (document.getElementById("topicOfLessonTb").value == '') {
                document.getElementById("topicOfLessonTb").style.borderColor = "red"
                document.getElementById("topicOfLessonTb").style.borderStyle = "solid"

                document.getElementById("alertErrors").innerHTML += "<div class=\"alert alert-danger alert-dismissible fade show\" role=\"alert\">"
                    + "Please enter Topic of Lesson"
                    + "<button type=\"button\" class=\"close\" data-dismiss=\"alert\" aria-label=\"Close\">"
                    + "<span aria-hidden=\"true\">&times;</span>"
                    + "</button></div>";
                topicOfLessonTbInputed = false;

            } else {
                var str = document.getElementById("alertErrors").innerHTML.trim();
                str = str.replace("<div class=\"alert alert-danger alert-dismissible fade show\" role=\"alert\">"
                    + "Please enter Topic of Lesson"
                    + "<button type=\"button\" class=\"close\" data-dismiss=\"alert\" aria-label=\"Close\">"
                    + "<span aria-hidden=\"true\">&times;</span>"
                    + "</button></div>", "");
                document.getElementById("alertErrors").innerHTML = str;
                topicOfLessonTbInputed = true;
            }

            if (topicOfLessonTbInputed) {
                document.getElementById("overlayForFormSubmission").style.display = "block"; //Allow to save
            }
        }


        function makeSubmitFormOverlayGone() {
            document.getElementById("overlayForFormSubmission").style.display = "none";
        }

        function trim(){
            document.getElementsByName("labelForLastModifiedBy").values.trim();
            document.getElementsByName("labelSetForLastModified").values.trim();
            document.getElementsByName("CommentsEditedBy").values.trim();
        }



        //Comment section handle
        $('#commentcontainerID').on('input', 'textarea[name$="commentsTA"]', function () {
            var idOfCommentTA = this.id;
            var noOfCommentTA = idOfCommentTA.substring(10, idOfCommentTA.length);
            document.getElementById("CommentsEditedBy" + noOfCommentTA).value = document.getElementById('userNameHere').innerText;
        });

        $('#EnableCommentCB').click(function () {
            var self = this;
            if (self.checked) {
                document.getElementById("CommentingIsUnavailableLbl").hidden = true;
                // document.getElementById("hiddenEnableCommentValue").value = "true";
            }
            else {
                document.getElementById("CommentingIsUnavailableLbl").hidden = false;
                // document.getElementById("hiddenEnableCommentValue").value = "false";
            }
        });

        var counterForNotes = $('.parent').length + 1;

        $('#pasteBtn').click(function () {
            var headerForNotesStoredArray = JSON.parse(sessionStorage.getItem("headerForNotesArray"));//no brackets
            var colorPickerForNoteArrayStoredArray = JSON.parse(sessionStorage.getItem("colorPickerForNoteArray"));//no brackets
            var goTextAreaArrayStoredArray = JSON.parse(sessionStorage.getItem("goTextAreaArray"));//no brackets
            var notesLastModifiedByArrayStoredArray = JSON.parse(sessionStorage.getItem("notesLastModifiedByArray"));//no brackets

            if (headerForNotesStoredArray != '') {
                if (headerForNotesStoredArray != null) {
                    checkeverytime();
                    tinymce.triggerSave();
                    document.getElementById("overlayForNotes").style.display = "block";
                    myVar = setTimeout(makeOverlayGone, 3000);
                    tinymce.remove();

                    for (v = 0; v < headerForNotesStoredArray.length; v++) {
                        $("#flexContainerId").append("<div class='parent' id='divForNC" + counterForNotes + "' style='background-color: " + colorPickerForNoteArrayStoredArray[v] + "'><input name='headerForNotesName' placeholder='Title...' id='headerForNotes" + counterForNotes + "' class='headersNotes' style='background-color: white' value='" + headerForNotesStoredArray[v] + "'><input title='Use this button to change the color of the note' type='color' value='" + colorPickerForNoteArrayStoredArray[v] + "' id='color" + counterForNotes + "' name='colorPickerForNote'><button title='Use this button to delete this note' type='button' name='goRemoveNotes' id='removeBtn" + counterForNotes + "' class='btn btn-danger' >Delete</button><button type='button' class='btn btn-info' name='moveUpBtn' id='moveUpBtn" + counterForNotes + "'><i class='fa fa-arrow-up' aria-hidden='true'></i></button>&nbsp;<button type='button' class='btn btn-info' name='moveDownBtn' id='moveDownBtn" + counterForNotes + "'><i class='fa fa-arrow-down' aria-hidden='true'></i></button><textarea class='notesTextArea' id='textArea" + counterForNotes + "' name='goTextArea'>" + goTextAreaArrayStoredArray[v] + "</textarea><label style='font-size: large;'>Last Modified by:</label><input readonly id='lastModifiedBy" + counterForNotes + "' class='labelForLastModifiedBy' name='labelForLastModifiedBy' value='" + notesLastModifiedByArrayStoredArray[v] + "'></div>");
                        counterForNotes++;
                    }

                    checkeverytime();
                    var newscript = document.createElement('script');
                    var insidescript = document.createTextNode("tinymce.init({selector: 'textarea:not(.commentsInput)', init_instance_callback: function(editor) {editor.on('keyup', function(e) {console.log(editor.id + ' was edited'); var theEditorId = editor.id; if(theEditorId.includes('Set')) {var justTheNumberFromSet = theEditorId.substring(11, theEditorId.length); var lastModifiedByLabel = 'lastModifiedBySet' + justTheNumberFromSet; document.getElementById(lastModifiedByLabel).value = document.getElementById('userNameHere').innerText;} else {var justTheNumber = theEditorId.substring(8, theEditorId.length); var noteLastModifiedLabel = 'lastModifiedBy' + justTheNumber; document.getElementById(noteLastModifiedLabel).value = document.getElementById('userNameHere').innerText;} });}, content_css: '//www.tiny.cloud/css/codepen.min.css', plugins: 'print preview searchreplace autolink autosave save directionality visualblocks visualchars fullscreen image link media template codesample table charmap hr pagebreak nonbreaking anchor toc insertdatetime advlist lists wordcount imagetools textpattern noneditable help charmap emoticons', toolbar: 'undo redo | bold italic underline strikethrough | fontselect fontsizeselect formatselect | alignleft aligncenter alignright alignjustify | outdent indent |  numlist bullist | forecolor backcolor removeformat | pagebreak | charmap emoticons | fullscreen  preview save print | insertfile image media template link anchor codesample | a11ycheck ltr rtl | showcomments addcomment', image_title: true, automatic_uploads: true, file_picker_types: 'image', file_picker_callback: function (cb, value, meta) {var input = document.createElement('input'); input.setAttribute('type', 'file'); input.setAttribute('accept', 'image/*'); input.onchange = function () { var file = this.files[0]; var reader = new FileReader(); reader.onload = function () { var id = 'blobid' + (new Date()).getTime(); var base64 = reader.result.split(',')[1]; var blobInfo = blobCache.create(id, file, base64); blobCache.add(blobInfo); cb(blobInfo.blobUri(), { title: file.name }); }; reader.readAsDataURL(file); }; input.click();}});");
                    newscript.appendChild(insidescript);
                    $("textarea").append(newscript);
                    ClickedOnMoveButtonForFirstTime = 0;
                }
            }

            var IdToInsertAfter = $('.timeline-article').length;

            // var counter = 2;
            // var counterColorForEvent = noOfTextAreaEvent + 1;
            // var secondCounterColorForEvent = noOfTextAreaEvent + 2;

            var uniqueheaderForEventStoredArray = JSON.parse(sessionStorage.getItem("uniqueheaderForEventArray"));//no brackets
            var colorForEventStoredArray = JSON.parse(sessionStorage.getItem("colorForEventArray"));//no brackets
            var textAreaSetStoredArray = JSON.parse(sessionStorage.getItem("textAreaSetArray"));//no brackets
            var labelSetForLastModifiedStoredArray = JSON.parse(sessionStorage.getItem("labelSetForLastModifiedArray"));//no brackets
            var addDurationInputStoredArray = JSON.parse(sessionStorage.getItem("addDurationInputArray"));//no brackets
            var addMinutesInputStoredArray = JSON.parse(sessionStorage.getItem("addMinutesInputArray"));//no brackets


            if (uniqueheaderForEventStoredArray != '') {
                if (uniqueheaderForEventStoredArray != null) {
                    ClickedOnMoveButtonForFirstTime = 0;
                    checkeverytime();
                    tinymce.triggerSave();
                    document.getElementById("overlayForNotes").style.display = "block";
                    myVar = setTimeout(makeOverlayGone, 3000);
                    var forDurationAndMinIndex = 0;

                    for (x = 0; x < uniqueheaderForEventStoredArray.length; x += 2) {
                        tinymce.remove();

                        var whereToInsertAfter = document.getElementById("eventSet" + IdToInsertAfter);
                        $("<div class='timeline-article' id='eventSet" + counter + "'><div class='content-left-container'><div class='content-left' style='background-color: " + colorForEventStoredArray[x] + "' id='divForCPE" + counterColorForEvent + "'><input name='headerForEventName' placeholder='Title...' id='uniqueheaderForEvent" + counterColorForEvent + "' class='headerForEvent' style='background-color: white' value='" + uniqueheaderForEventStoredArray[x] + "'><textarea id='textAreaSet" + counterColorForEvent + "' name='textAreasForEvents' style='height: 400px' class='taclass' contenteditable='true'>" + textAreaSetStoredArray[x] + "</textarea><input title='Use this button to change the color of the note' type='color' value='" + colorForEventStoredArray[x] + "' name='colorPickerForEvent' id='colorForEvent" + counterColorForEvent + "' /><label style='font-size: small;'>Last Modified By:</label><input readonly class='labelSetForLastModified' name='labelSetForLastModified' id='lastModifiedBySet" + counterColorForEvent + "' value='" + labelSetForLastModifiedStoredArray[x] + "'></div><label>Duration:</label><br /><input type='number' min='0' max='23' value='0' name='goDuration' style='width: 50px' id='addDurationInput" + counter + "' value='" + addDurationInputStoredArray[forDurationAndMinIndex] + "' />&nbsp<label>hour(s)</label>&nbsp<input type='number' min='0' max='59' value='0' name='goMinutes' style='width: 50px' id='addMinutesInput" + counter + "' value='" + addMinutesInputStoredArray[forDurationAndMinIndex] + "' />&nbsp<label>minute(s)</label><br /><label hidden>Start Time:</label><br /><input name='goTime' type='time' id='inputForStartTime" + counter + "' hidden /></div><div class='content-right-container'><div class='content-right' style='background-color: " + colorForEventStoredArray[(x + 1)] + "' id='divForCPE" + secondCounterColorForEvent + "'><input name='headerForEventName' placeholder='Title...' id='uniqueheaderForEvent" + secondCounterColorForEvent + "' class='headerForEvent' style='background-color: white' value='" + uniqueheaderForEventStoredArray[(x + 1)] + "'><textarea id='textAreaSet" + secondCounterColorForEvent + "' name='textAreasForEvents' style='height: 400px' class='taclass' contenteditable='true'>" + textAreaSetStoredArray[(x + 1)] + "</textarea><input title='Use this button to change the color of the note' type='color' value='" + colorForEventStoredArray[(x + 1)] + "' name='colorPickerForEvent' id='colorForEvent" + secondCounterColorForEvent + "'/><label style='font-size: small;'>Last Modified by:</label><input readonly id='lastModifiedBySet" + secondCounterColorForEvent + "' class='labelSetForLastModified' name='labelSetForLastModified' value='" + labelSetForLastModifiedStoredArray[(x + 1)] + "'></div></div><div class='meta-date'><span class='date' id='circleForEvent" + counter + "'></span><input name='middleTimeHidden' id='middleTimeHidden" + counter + "' value='00:00' hidden/></div><button type='button' id='moveUpBtnTL" + counter + "' class='btn btn-info' name='moveUpBtnTL' style='display: block; margin-left: auto; margin-right: auto; margin-bottom: 10px; margin-top: 150px;'><i class='fa fa-arrow-up' aria-hidden='true'></i></button><button type='button' id='moveDownBtnTL" + counter + "' class='btn btn-info' name='moveDownBtnTL' style='display: block; margin-left: auto; margin-right: auto; margin-bottom: 10px;'><i class='fa fa-arrow-down' aria-hidden='true'></i></button><button title='Use this button to delete this event' type='button' name='goRemoveEvents' id='removeEventBtn" + counter + "' class='btn clever-btn btn-2' style='display: block; margin-left: auto; margin-right: auto; margin-bottom: 10px; margin-top: 100px;'><i class='fa fa-trash' style='font-size: 18px'></i></button><input type='button' value='+' class='btn clever-btn btn-2' name='goButton' title='Use this button to add an event' style='display: block; margin: auto; max-width: 300px; margin-top: 110px; background: #00b0bd; color: rgba(0, 0, 0, 0.50); font-size:xx-large' id='addEventBtn" + counter + "' /></div>").insertAfter(whereToInsertAfter);
                        // $("<div class='timeline-article' id='eventSet" + counter + "'><div class='content-left-container'><div class='content-left' style='background-color: " + colorForEventStoredArray[0] +"' id='divForCPE" + counterColorForEvent + "'><input name='headerForEventName' placeholder='Title...' id='uniqueheaderForEvent" + counterColorForEvent + "' class='headerForEvent' style='background-color: white' value='" + uniqueheaderForEventStoredArray[0] + "'><textarea id='textAreaSet" + counterColorForEvent + "' name='textAreasForEvents' style='height: 400px' class='taclass' contenteditable='true'>" + textAreaSetStoredArray[0] + "</textarea><input title='Use this button to change the color of the note' type='color' value='" + colorForEventStoredArray[0] + "' name='colorPickerForEvent' id='colorForEvent" + counterColorForEvent + "' /><label style='font-size: small;'>Last Modified By:</label><input readonly class='labelSetForLastModified' name='labelSetForLastModified' id='lastModifiedBySet" + counterColorForEvent + "' value='" + labelSetForLastModifiedStoredArray[0] +"'></div><label>Duration:</label><br /><input type='number' min='0' max='23' name='goDuration' style='width: 50px' id='addDurationInput" + counter + "' value='" + addDurationInputStoredArray[0] + "' />&nbsp<label>hour(s)</label>&nbsp<input type='number' min='0' max='59' name='goMinutes' style='width: 50px' id='addMinutesInput" + counter + "' value='" + addMinutesInputStoredArray[0] + "' />&nbsp<label>minute(s)</label><br /><label hidden>Start Time:</label><br /><input name='goTime' type='time' id='inputForStartTime" + counter + "' hidden /></div><div class='content-right-container'><div class='content-right' style='background-color: " + colorForEventStoredArray[(0 + 1)] + "' id='divForCPE" + secondCounterColorForEvent + "'><input name='headerForEventName' placeholder='Title...' id='uniqueheaderForEvent" + secondCounterColorForEvent + "' class='headerForEvent' style='background-color: white' value='" + uniqueheaderForEventStoredArray[(0 + 1)] + "'><textarea id='textAreaSet" + secondCounterColorForEvent + "' name='textAreasForEvents' style='height: 400px' class='taclass' contenteditable='true'>" + textAreaSetStoredArray[(0 + 1)] + "</textarea><input title='Use this button to change the color of the note' type='color' value='" + colorForEventStoredArray[(0 + 1)] + "' name='colorPickerForEvent' id='colorForEvent" + secondCounterColorForEvent + "'/><label style='font-size: small;'>Last Modified by:</label><input readonly id='lastModifiedBySet" + secondCounterColorForEvent + "' class='labelSetForLastModified' name='labelSetForLastModified' value='" + labelSetForLastModifiedStoredArray[(0 + 1)] +"'></div></div><div class='meta-date'><span class='date' id='circleForEvent" + counter + "'></span><input name='middleTimeHidden' id='middleTimeHidden" + counter + "' value='00:00' hidden/></div><button type='button' id='moveUpBtnTL" + counter + "' class='btn btn-info' name='moveUpBtnTL' style='display: block; margin-left: auto; margin-right: auto; margin-bottom: 10px; margin-top: 150px;'><i class='fa fa-arrow-up' aria-hidden='true'></i></button><button type='button' id='moveDownBtnTL" + counter + "' class='btn btn-info' name='moveDownBtnTL' style='display: block; margin-left: auto; margin-right: auto; margin-bottom: 10px;'><i class='fa fa-arrow-down' aria-hidden='true'></i></button><button title='Use this button to delete this event' type='button' name='goRemoveEvents' id='removeEventBtn" + counter + "' class='btn clever-btn btn-2' style='display: block; margin-left: auto; margin-right: auto; margin-bottom: 10px; margin-top: 100px;'><i class='fa fa-trash' style='font-size: 18px'></i></button><input type='button' value='+' class='btn clever-btn btn-2' name='goButton' title='Use this button to add an event' style='display: block; margin: auto; max-width: 300px; margin-top: 110px; background: #00b0bd; color: rgba(0, 0, 0, 0.50); font-size:xx-large' id='addEventBtn" + counter + "' /></div>").insertAfter(whereToInsertAfter);
                        IdToInsertAfter++;
                        forDurationAndMinIndex++;
                        counter++;
                        counterColorForEvent += 2;
                        secondCounterColorForEvent += 2;

                        checkeverytime();
                        var newscript = document.createElement('script');
                        var insidescript = document.createTextNode("tinymce.init({selector: 'textarea:not(.commentsInput)', init_instance_callback: function(editor) {editor.on('keyup', function(e) {console.log(editor.id + ' was edited'); var theEditorId = editor.id; if(theEditorId.includes('Set')) {var justTheNumberFromSet = theEditorId.substring(11, theEditorId.length); var lastModifiedByLabel = 'lastModifiedBySet' + justTheNumberFromSet; document.getElementById(lastModifiedByLabel).value = document.getElementById('userNameHere').innerText;} else {var justTheNumber = theEditorId.substring(8, theEditorId.length); var noteLastModifiedLabel = 'lastModifiedBy' + justTheNumber; document.getElementById(noteLastModifiedLabel).value = document.getElementById('userNameHere').innerText;} });}, content_css: '//www.tiny.cloud/css/codepen.min.css', plugins: 'print preview searchreplace autolink autosave save directionality visualblocks visualchars fullscreen image link media template codesample table charmap hr pagebreak nonbreaking anchor toc insertdatetime advlist lists wordcount imagetools textpattern noneditable help charmap emoticons', toolbar: 'undo redo | bold italic underline strikethrough | fontselect fontsizeselect formatselect | alignleft aligncenter alignright alignjustify | outdent indent |  numlist bullist | forecolor backcolor removeformat | pagebreak | charmap emoticons | fullscreen  preview save print | insertfile image media template link anchor codesample | ltr rtl | showcomments addcomment', image_title: true, automatic_uploads: true, file_picker_types: 'image', file_picker_callback: function (cb, value, meta) {var input = document.createElement('input'); input.setAttribute('type', 'file'); input.setAttribute('accept', 'image/*'); input.onchange = function () { var file = this.files[0]; var reader = new FileReader(); reader.onload = function () { var id = 'blobid' + (new Date()).getTime(); var base64 = reader.result.split(',')[1]; var blobInfo = blobCache.create(id, file, base64); blobCache.add(blobInfo); cb(blobInfo.blobUri(), { title: file.name }); }; reader.readAsDataURL(file); }; input.click();}});");
                        newscript.appendChild(insidescript);
                        $("textarea").append(newscript);
                    }

                }
            }

        });
        

    </script>
</body>

</html>